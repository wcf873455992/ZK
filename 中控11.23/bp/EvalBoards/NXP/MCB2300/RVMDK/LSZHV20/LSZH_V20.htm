<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [E:\bp\program\bp\EvalBoards\NXP\MCB2300\RVMDK\LSZHV20\LSZH_V20.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image E:\bp\program\bp\EvalBoards\NXP\MCB2300\RVMDK\LSZHV20\LSZH_V20.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Wed Apr 21 09:34:47 2010
<BR><P>
<H3>Maximum Stack Usage =        552 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TASK_UART &rArr; UDP_msg_rev &rArr; UDP_Send_ACK &rArr; Udp_SendPacked &rArr; IP_SendFrame &rArr; Arp_Request &rArr; Ethernet_SendFrame &rArr; Send_Packet
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d16450]">OS_CPU_SR_Save</a>
 <LI><a href="#[d1648c]">OS_CPU_SR_Restore</a>
 <LI><a href="#[d0e9bc]">OSStartHighRdy</a>
 <LI><a href="#[d0e980]">OSCtxSw</a>
 <LI><a href="#[d0e944]">OSIntCtxSw</a>
 <LI><a href="#[d0e908]">OS_CPU_ARM_ExceptResetHndlr</a>
 <LI><a href="#[d177c4]">OS_CPU_ARM_ExceptUndefInstrHndlr</a>
 <LI><a href="#[d17800]">OS_CPU_ARM_ExceptSwiHndlr</a>
 <LI><a href="#[d1783c]">OS_CPU_ARM_ExceptPrefetchAbortHndlr</a>
 <LI><a href="#[d178f0]">OS_CPU_ARM_ExceptDataAbortHndlr</a>
 <LI><a href="#[d0e8cc]">OS_CPU_ARM_ExceptAddrAbortHndlr</a>
 <LI><a href="#[d17878]">OS_CPU_ARM_ExceptIrqHndlr</a>
 <LI><a href="#[d178b4]">OS_CPU_ARM_ExceptFiqHndlr</a>
 <LI><a href="#[d17788]">ResetHndlr</a>
 <LI><a href="#[d16cc0]">CPU_SR_Save</a>
 <LI><a href="#[d16cfc]">CPU_SR_Restore</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d17788]">ResetHndlr</a>
 <LI><a href="#[d177c4]">OS_CPU_ARM_ExceptUndefInstrHndlr</a>
 <LI><a href="#[d17800]">OS_CPU_ARM_ExceptSwiHndlr</a>
 <LI><a href="#[d1783c]">OS_CPU_ARM_ExceptPrefetchAbortHndlr</a>
 <LI><a href="#[d178f0]">OS_CPU_ARM_ExceptDataAbortHndlr</a>
 <LI><a href="#[d17878]">OS_CPU_ARM_ExceptIrqHndlr</a>
 <LI><a href="#[d178b4]">OS_CPU_ARM_ExceptFiqHndlr</a>
 <LI><a href="#[d17f80]">main</a>
 <LI><a href="#[d17c74]">TASK_UART</a>
 <LI><a href="#[d15c58]">I2C0_Exception</a>
 <LI><a href="#[d1558c]">I2C1_Exception</a>
 <LI><a href="#[d0edb8]">EINT1_Exception</a>
 <LI><a href="#[d177c4]">OS_CPU_ARM_ExceptUndefInstrHndlr</a>
 <LI><a href="#[d17800]">OS_CPU_ARM_ExceptSwiHndlr</a>
 <LI><a href="#[d1783c]">OS_CPU_ARM_ExceptPrefetchAbortHndlr</a>
 <LI><a href="#[d178f0]">OS_CPU_ARM_ExceptDataAbortHndlr</a>
 <LI><a href="#[d0e8cc]">OS_CPU_ARM_ExceptAddrAbortHndlr</a>
 <LI><a href="#[d17878]">OS_CPU_ARM_ExceptIrqHndlr</a>
 <LI><a href="#[d178b4]">OS_CPU_ARM_ExceptFiqHndlr</a>
 <LI><a href="#[d66864]">_sputc</a>
 <LI><a href="#[d669cc]">_printf_input_char</a>
 <LI><a href="#[169ac68]">_get_lc_ctype</a>
 <LI><a href="#[1698ae4]">__I$use$semihosting</a>
 <LI><a href="#[d0e6ec]">OSTaskSwHook</a>
 <LI><a href="#[d0e890]">OSIntExit</a>
 <LI><a href="#[d16d38]">OS_CPU_ExceptHndlr</a>
 <LI><a href="#[d677a0]">__main</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d677a0]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d67674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1695f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1695f88]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[d677a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1695f4c]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d67674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1695f10]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1695d6c]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1695d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1695d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1695c7c]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[16a0050]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[d66abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (via Veneer)
</UL>

<P><STRONG><a name="[169f7a4]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16a02e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[169feac]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16a0b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr (via Veneer)
</UL>

<P><STRONG><a name="[169fab0]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[169ee08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[169f9fc]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[169ee08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[169f948]"></a>_printf_g</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[169ee08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[169f894]"></a>_printf_a</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Calls]<UL><LI><a href="#[169f858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
</UL>

<P><STRONG><a name="[169f498]"></a>_printf_ll</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[169fccc]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d66c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[169fc18]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d66c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[169fb64]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d66c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[169fdbc]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d660a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[169ff9c]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16a0bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[169f6b4]"></a>_printf_lli</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d664e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[169f600]"></a>_printf_lld</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d664e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[169f54c]"></a>_printf_llu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d664e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[169f150]"></a>_printf_llo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6606c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct (via Veneer)
</UL>

<P><STRONG><a name="[169f060]"></a>_printf_llx</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16a0b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex (via Veneer)
</UL>

<P><STRONG><a name="[169f3e4]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[16a0230]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[169dbfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[16a0140]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[169dbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[169f330]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[169da58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[169f240]"></a>_printf_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[169da1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring (via Veneer)
</UL>

<P><STRONG><a name="[169d92c]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[169bc1c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[1698cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[169ea84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[1699e1c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[1699cf0]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Calls]<UL><LI><a href="#[169d170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
</UL>

<P><STRONG><a name="[1699d2c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1699da4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1699c78]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[1699c3c]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[169ac68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (via Veneer)
</UL>

<P><STRONG><a name="[1699c00]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1699b88]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1699b4c]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[169c414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (via Veneer)
</UL>

<P><STRONG><a name="[16995e8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1699660]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[1699a20]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[16998b8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[16994f8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1699570]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1699930]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1699840]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1699b10]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1699a98]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[16994bc]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[16999a8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[16997c8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1697824]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16988c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[16964ec]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[169630c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[16962d0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1696438]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[16965a0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[16963c0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[d67674]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d677a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1695f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[169eb38]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[169e64c]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[169ea84]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[169bc1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[169eac0]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[169e9d0]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[169c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[169ea0c]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[169b064]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[169c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[16988c8]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1697824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[1698904]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[169888c]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1698bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[d17fbc]"></a>TASK_START</STRONG> (ARM, 176 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d17a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[d17ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_init
<LI><a href="#[d17b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGACD22M3494Reset
<LI><a href="#[d17b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_init
<LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d17bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
<LI><a href="#[d17c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
<LI><a href="#[d17cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT2258Init
<LI><a href="#[d17cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_init
<LI><a href="#[d17d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Option_init
<LI><a href="#[d17d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d17e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_arp
<LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
<LI><a href="#[d17f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_init
<LI><a href="#[d17f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCD22M3494Reset
</UL>

<P><STRONG><a name="[d17f80]"></a>main</STRONG> (ARM, 84 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = main &rArr; TargetResetInit &rArr; UART_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d17bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
<LI><a href="#[d17bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
<LI><a href="#[d17d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d17da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[d17ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[d16fcc]"></a>VIC_Init</STRONG> (ARM, 76 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d17bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[d16f90]"></a>Reset</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d16f54]"></a>SetVICIRQ</STRONG> (ARM, 56 bytes, Stack size 0 bytes, target.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0ec8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
<LI><a href="#[d12184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_init
<LI><a href="#[d150dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[d16bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1Init
<LI><a href="#[d16c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c0Init
<LI><a href="#[d16ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Init
<LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[d16f18]"></a>GetTickCount</STRONG> (ARM, 12 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[d16edc]"></a>Timer2_Exception</STRONG> (ARM, 64 bytes, Stack size 8 bytes, target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[d16ea0]"></a>Timer2Init</STRONG> (ARM, 80 bytes, Stack size 4 bytes, target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVICIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d17c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[d17c38]"></a>TargetInit</STRONG> (ARM, 52 bytes, Stack size 8 bytes, target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[d16b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINInit
<LI><a href="#[d16b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Init
<LI><a href="#[d16bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1Init
<LI><a href="#[d16c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c0Init
<LI><a href="#[d16c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_KZ_Reset
<LI><a href="#[d16c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_IC_Reset
<LI><a href="#[d16ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
</UL>

<P><STRONG><a name="[d16e64]"></a>Reset_BootLoader</STRONG> (ARM, 40 bytes, Stack size 8 bytes, target.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6c0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_UserProgram_Write
</UL>

<P><STRONG><a name="[d16e28]"></a>BSP_IntDisAll</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d17bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[d16dec]"></a>BSP_CPU_ClkFreq</STRONG> (ARM, 220 bytes, Stack size 32 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_CPU_ClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d6804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d16db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_PclkFreq
<LI><a href="#[d172d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAM_Init
<LI><a href="#[d17bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[d16db0]"></a>BSP_CPU_PclkFreq</STRONG> (ARM, 432 bytes, Stack size 16 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_CPU_PclkFreq &rArr; BSP_CPU_ClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d16dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d17bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[d17bfc]"></a>TargetResetInit</STRONG> (ARM, 68 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = TargetResetInit &rArr; UART_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d16a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Debug_init
<LI><a href="#[d16db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_PclkFreq
<LI><a href="#[d16dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
<LI><a href="#[d16e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDisAll
<LI><a href="#[d16fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Init
<LI><a href="#[d1729c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[d172d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAM_Init
<LI><a href="#[d17bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d17f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d16d74]"></a>_ttywrch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[d16d38]"></a>OS_CPU_ExceptHndlr</STRONG> (ARM, 64 bytes, Stack size 16 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_CPU_ExceptHndlr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(CODE)
</UL>
<P><STRONG><a name="[d165f4]"></a>On_MSG_OPTION_HW_END</STRONG> (ARM, 4 bytes, Stack size 0 bytes, hw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d165b8]"></a>HW_XM_start</STRONG> (ARM, 1136 bytes, Stack size 48 bytes, hw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d164c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Debug
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d1657c]"></a>HW_send</STRONG> (ARM, 640 bytes, Stack size 40 bytes, hw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d680c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION
<LI><a href="#[d6c87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_Power_OPTION
<LI><a href="#[d6c8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_RepeatPower_OPTION
</UL>

<P><STRONG><a name="[d16540]"></a>Time1_Exception</STRONG> (ARM, 4 bytes, Stack size 0 bytes, hw.o(.text), UNUSED)

<P><STRONG><a name="[d16504]"></a>Time0_Exception</STRONG> (ARM, 4 bytes, Stack size 0 bytes, hw.o(.text), UNUSED)

<P><STRONG><a name="[d17f08]"></a>HW_init</STRONG> (ARM, 44 bytes, Stack size 8 bytes, hw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
</UL>

<P><STRONG><a name="[d15d48]"></a>ISendByte0</STRONG> (ARM, 152 bytes, Stack size 24 bytes, i2c0int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
</UL>

<P><STRONG><a name="[d15d0c]"></a>IRcvByte0</STRONG> (ARM, 156 bytes, Stack size 16 bytes, i2c0int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
</UL>

<P><STRONG><a name="[d15cd0]"></a>I2C0_ReadNByte</STRONG> (ARM, 308 bytes, Stack size 32 bytes, i2c0int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
</UL>

<P><STRONG><a name="[d15c94]"></a>I2C0_WriteNByte</STRONG> (ARM, 292 bytes, Stack size 32 bytes, i2c0int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[d12bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundVolumeControl
<LI><a href="#[d17cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT2258Init
</UL>

<P><STRONG><a name="[d15c58]"></a>I2C0_Exception</STRONG> (ARM, 1092 bytes, Stack size 0 bytes, i2c0int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> i2c0int.o(.text)
</UL>
<P><STRONG><a name="[d16c0c]"></a>I2c0Init</STRONG> (ARM, 116 bytes, Stack size 8 bytes, i2c0int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVICIRQ
<LI><a href="#[d6804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d17c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[d1567c]"></a>ISendByte1</STRONG> (ARM, 164 bytes, Stack size 8 bytes, i2c1int.o(.text), UNUSED)

<P><STRONG><a name="[d15640]"></a>IRcvByte1</STRONG> (ARM, 136 bytes, Stack size 0 bytes, i2c1int.o(.text), UNUSED)

<P><STRONG><a name="[d15604]"></a>I2C1_ReadNByte</STRONG> (ARM, 312 bytes, Stack size 32 bytes, i2c1int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[d15514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Write
<LI><a href="#[d15550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Read
</UL>

<P><STRONG><a name="[d155c8]"></a>I2C1_WriteNByte</STRONG> (ARM, 300 bytes, Stack size 32 bytes, i2c1int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[d15514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Write
</UL>

<P><STRONG><a name="[d1558c]"></a>I2C1_Exception</STRONG> (ARM, 1092 bytes, Stack size 0 bytes, i2c1int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> i2c1int.o(.text)
</UL>
<P><STRONG><a name="[d15550]"></a>AT24C16_Read</STRONG> (ARM, 68 bytes, Stack size 32 bytes, i2c1int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d15604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Use_Stat_Read
<LI><a href="#[d6b544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_ID_Read
<LI><a href="#[d6c138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Read
<LI><a href="#[d6c1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read_CurDay
<LI><a href="#[d6c228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read
</UL>

<P><STRONG><a name="[d15514]"></a>AT24C16_Write</STRONG> (ARM, 376 bytes, Stack size 56 bytes, i2c1int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d155c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteNByte
<LI><a href="#[d15604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadNByte
<LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_ID_Read
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6c174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Write_OneDay
<LI><a href="#[d6c1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Write
<LI><a href="#[d6c264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Stat_Save
</UL>

<P><STRONG><a name="[d16bd0]"></a>I2c1Init</STRONG> (ARM, 116 bytes, Stack size 8 bytes, i2c1int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVICIRQ
<LI><a href="#[d6804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d17c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[d15190]"></a>DMA_Get_Play_Pointer</STRONG> (ARM, 52 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d15064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Play_Int
</UL>

<P><STRONG><a name="[d15154]"></a>DMA_Get_MICaddress</STRONG> (ARM, 64 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d150a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Input_Int
</UL>

<P><STRONG><a name="[d15118]"></a>DMAHandler</STRONG> (ARM, 112 bytes, Stack size 16 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d15064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Play_Int
<LI><a href="#[d150a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Input_Int
</UL>

<P><STRONG><a name="[d150dc]"></a>DMA_Init</STRONG> (ARM, 420 bytes, Stack size 16 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVICIRQ
<LI><a href="#[d6804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d141a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_init
</UL>

<P><STRONG><a name="[d14ce0]"></a>I2SStart</STRONG> (ARM, 36 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d141a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_init
</UL>

<P><STRONG><a name="[d14ca4]"></a>I2SStop</STRONG> (ARM, 40 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d14c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SInit
</UL>

<P><STRONG><a name="[d14c68]"></a>I2SInit</STRONG> (ARM, 152 bytes, Stack size 4 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d14ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SStop
</UL>
<BR>[Called By]<UL><LI><a href="#[d141a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_init
</UL>

<P><STRONG><a name="[d148e4]"></a>aic23_delay</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tms320aic23.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d148a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_Reg_Write
</UL>

<P><STRONG><a name="[d148a8]"></a>TMS320AIC23_Reg_Write</STRONG> (ARM, 144 bytes, Stack size 32 bytes, tms320aic23.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d147b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_send
<LI><a href="#[d147f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Out
<LI><a href="#[d148e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aic23_delay
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d14830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_init
<LI><a href="#[d1486c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_Set_Vol
</UL>

<P><STRONG><a name="[d1486c]"></a>TMS320AIC23_Set_Vol</STRONG> (ARM, 156 bytes, Stack size 24 bytes, tms320aic23.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d148a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_Reg_Write
<LI><a href="#[d680c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d14830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_init
</UL>

<P><STRONG><a name="[d14830]"></a>TMS320AIC23_init</STRONG> (ARM, 148 bytes, Stack size 8 bytes, tms320aic23.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d147f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Out
<LI><a href="#[d1486c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_Set_Vol
<LI><a href="#[d148a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_Reg_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d141a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_init
</UL>

<P><STRONG><a name="[d14308]"></a>Sound_Echo_Contrl</STRONG> (ARM, 120 bytes, Stack size 0 bytes, use_sound.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0fc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ReceivePacket
</UL>

<P><STRONG><a name="[d142cc]"></a>Sound_Open</STRONG> (ARM, 280 bytes, Stack size 40 bytes, use_sound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6cf0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_LINK
<LI><a href="#[d6cf48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_TEST
</UL>

<P><STRONG><a name="[d14290]"></a>Sound_Close</STRONG> (ARM, 708 bytes, Stack size 24 bytes, use_sound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d14128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Compare
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6ced0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_BREAK
<LI><a href="#[d6cf0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_LINK
<LI><a href="#[d6cf84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_OFF
</UL>

<P><STRONG><a name="[d14254]"></a>Sound_Get_Play_No</STRONG> (ARM, 180 bytes, Stack size 16 bytes, use_sound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d14128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Compare
</UL>
<BR>[Called By]<UL><LI><a href="#[d14218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Save_PlayData
</UL>

<P><STRONG><a name="[d14218]"></a>Sound_Save_PlayData</STRONG> (ARM, 224 bytes, Stack size 24 bytes, use_sound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d14254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Get_Play_No
<LI><a href="#[d680c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0fc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ReceivePacket
</UL>

<P><STRONG><a name="[d141dc]"></a>Sound_Pointer_Scan</STRONG> (ARM, 208 bytes, Stack size 16 bytes, use_sound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d680c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d15064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Play_Int
</UL>

<P><STRONG><a name="[d15064]"></a>Sound_Play_Int</STRONG> (ARM, 172 bytes, Stack size 16 bytes, use_sound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d141dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Pointer_Scan
<LI><a href="#[d15190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Get_Play_Pointer
<LI><a href="#[d680c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d15118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAHandler
</UL>

<P><STRONG><a name="[d150a0]"></a>Sound_Input_Int</STRONG> (ARM, 260 bytes, Stack size 48 bytes, use_sound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d140ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udp_SendPacked
<LI><a href="#[d14164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NetPort
<LI><a href="#[d15154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Get_MICaddress
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d15118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAHandler
</UL>

<P><STRONG><a name="[d141a0]"></a>Sound_init</STRONG> (ARM, 256 bytes, Stack size 16 bytes, use_sound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d14164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NetPort
<LI><a href="#[d14830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_init
<LI><a href="#[d14c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SInit
<LI><a href="#[d14ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SStart
<LI><a href="#[d150dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
<LI><a href="#[d68718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d16b1c]"></a>PINInit</STRONG> (ARM, 64 bytes, Stack size 0 bytes, io.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[d16b94]"></a>Io_Init</STRONG> (ARM, 256 bytes, Stack size 0 bytes, io.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[d147f4]"></a>IO_Out</STRONG> (ARM, 284 bytes, Stack size 4 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IO_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[d13a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_DCS_open
<LI><a href="#[d13b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Contrl
<LI><a href="#[d14830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_init
<LI><a href="#[d148a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_Reg_Write
<LI><a href="#[d16c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_KZ_Reset
<LI><a href="#[d16c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_IC_Reset
<LI><a href="#[d17cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_init
<LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
<LI><a href="#[d6ac20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PC_Power
<LI><a href="#[d6b4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Link
<LI><a href="#[d6c3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_IO_TEST
<LI><a href="#[d6c408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_TEST_IO
</UL>

<P><STRONG><a name="[d13b4c]"></a>IO_in</STRONG> (ARM, 180 bytes, Stack size 4 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IO_in
</UL>
<BR>[Called By]<UL><LI><a href="#[d13ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Scan
<LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
<LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
<LI><a href="#[d6c3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_IO_TEST
<LI><a href="#[d6c408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_TEST_IO
</UL>

<P><STRONG><a name="[d17ecc]"></a>IO_FlagLingt_Flash</STRONG> (ARM, 84 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IO_FlagLingt_Flash &rArr; IO_in
</UL>
<BR>[Calls]<UL><LI><a href="#[d13b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_in
<LI><a href="#[d147f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d13ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Scan
<LI><a href="#[d141a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_init
<LI><a href="#[d15514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Write
<LI><a href="#[d155c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_WriteNByte
<LI><a href="#[d15604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ReadNByte
<LI><a href="#[d15c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteNByte
<LI><a href="#[d15cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ReadNByte
<LI><a href="#[d15d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRcvByte0
<LI><a href="#[d15d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISendByte0
<LI><a href="#[d165b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_XM_start
<LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
<LI><a href="#[d6b418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Use_Stat_Read
<LI><a href="#[d6b544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_ID_Read
<LI><a href="#[d6c1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read_CurDay
</UL>

<P><STRONG><a name="[d13b10]"></a>IO_Contrl</STRONG> (ARM, 212 bytes, Stack size 16 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d147f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
</UL>

<P><STRONG><a name="[d13ad4]"></a>IO_Scan</STRONG> (ARM, 1188 bytes, Stack size 16 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d139a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d13a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_TB_state
<LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[d13b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_in
<LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d16c84]"></a>Device_IC_Reset</STRONG> (ARM, 56 bytes, Stack size 8 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d147f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[d17c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
<LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[d16c48]"></a>Device_KZ_Reset</STRONG> (ARM, 56 bytes, Stack size 8 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d147f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[d17c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[d13a98]"></a>Device_DCS_open</STRONG> (ARM, 44 bytes, Stack size 8 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1396c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d147f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
</UL>

<P><STRONG><a name="[d13354]"></a>ChangeY</STRONG> (ARM, 60 bytes, Stack size 4 bytes, cd22m3494.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d13228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA0Sel
<LI><a href="#[d13264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA1Sel
<LI><a href="#[d132dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AV_Select
</UL>

<P><STRONG><a name="[d13318]"></a>ChangeX</STRONG> (ARM, 296 bytes, Stack size 0 bytes, cd22m3494.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d13228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA0Sel
<LI><a href="#[d13264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA1Sel
<LI><a href="#[d132dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AV_Select
</UL>

<P><STRONG><a name="[d132dc]"></a>AV_Select</STRONG> (ARM, 744 bytes, Stack size 32 bytes, cd22m3494.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
<LI><a href="#[d130c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[d13318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeX
<LI><a href="#[d13354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeY
</UL>
<BR>[Called By]<UL><LI><a href="#[d130fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Link_Scan
<LI><a href="#[d132a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Video_Select
</UL>

<P><STRONG><a name="[d132a0]"></a>Device_Video_Select</STRONG> (ARM, 140 bytes, Stack size 16 bytes, cd22m3494.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d132dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AV_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[d17f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCD22M3494Reset
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6bfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TB_Select
<LI><a href="#[d6c534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_VIDEO_SELECT
<LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
</UL>

<P><STRONG><a name="[d17f44]"></a>AVCD22M3494Reset</STRONG> (ARM, 332 bytes, Stack size 8 bytes, cd22m3494.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
<LI><a href="#[d130c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[d132a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Video_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
</UL>

<P><STRONG><a name="[d13264]"></a>VGA1Sel</STRONG> (ARM, 348 bytes, Stack size 24 bytes, cd22m3494.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
<LI><a href="#[d130c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[d13318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeX
<LI><a href="#[d13354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeY
</UL>
<BR>[Called By]<UL><LI><a href="#[d131ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Select
</UL>

<P><STRONG><a name="[d13228]"></a>VGA0Sel</STRONG> (ARM, 348 bytes, Stack size 24 bytes, cd22m3494.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
<LI><a href="#[d130c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[d13318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeX
<LI><a href="#[d13354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeY
</UL>
<BR>[Called By]<UL><LI><a href="#[d131ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Select
</UL>

<P><STRONG><a name="[d131ec]"></a>VGA_Select</STRONG> (ARM, 1136 bytes, Stack size 16 bytes, cd22m3494.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA0Sel
<LI><a href="#[d13264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA1Sel
</UL>
<BR>[Called By]<UL><LI><a href="#[d130fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Link_Scan
<LI><a href="#[d131b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_VGA_Select
</UL>

<P><STRONG><a name="[d131b0]"></a>Device_VGA_Select</STRONG> (ARM, 152 bytes, Stack size 16 bytes, cd22m3494.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d131ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGACD22M3494Reset
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6bfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TB_Select
<LI><a href="#[d6c4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_VGA_SELECT
<LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
</UL>

<P><STRONG><a name="[d17b0c]"></a>VGACD22M3494Reset</STRONG> (ARM, 320 bytes, Stack size 8 bytes, cd22m3494.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
<LI><a href="#[d130c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[d131b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_VGA_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
</UL>

<P><STRONG><a name="[d13174]"></a>AV_Get_chanle</STRONG> (ARM, 12 bytes, Stack size 0 bytes, cd22m3494.o(.text), UNUSED)

<P><STRONG><a name="[d13138]"></a>VGA_Get_chanle</STRONG> (ARM, 12 bytes, Stack size 0 bytes, cd22m3494.o(.text), UNUSED)

<P><STRONG><a name="[d130fc]"></a>Device_Link_Scan</STRONG> (ARM, 160 bytes, Stack size 8 bytes, cd22m3494.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d131ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Select
<LI><a href="#[d132dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AV_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d130c0]"></a>Delay</STRONG> (ARM, 28 bytes, Stack size 0 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
<LI><a href="#[d13228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA0Sel
<LI><a href="#[d13264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA1Sel
<LI><a href="#[d132dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AV_Select
<LI><a href="#[d17b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGACD22M3494Reset
<LI><a href="#[d17f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCD22M3494Reset
</UL>

<P><STRONG><a name="[d12bd4]"></a>SoundVolumeControl</STRONG> (ARM, 1128 bytes, Stack size 32 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d15c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteNByte
<LI><a href="#[d680c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d129f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_OutVol
<LI><a href="#[d12aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_InVol
<LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
<LI><a href="#[d6d128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Sound_Mute
</UL>

<P><STRONG><a name="[d13048]"></a>SpiSendData</STRONG> (ARM, 152 bytes, Stack size 16 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d130c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[d147b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_send
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d12904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Sound_Select
<LI><a href="#[d12940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Sound_Contrl
<LI><a href="#[d12ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN_Sound_OUT
<LI><a href="#[d12b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN_Sound_Select
<LI><a href="#[d12b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMK_Sound_Select
<LI><a href="#[d12b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_DEVICE_Mute
<LI><a href="#[d13228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA0Sel
<LI><a href="#[d13264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA1Sel
<LI><a href="#[d132dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AV_Select
<LI><a href="#[d17b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGACD22M3494Reset
<LI><a href="#[d17f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCD22M3494Reset
</UL>

<P><STRONG><a name="[d12b98]"></a>SOUND_DEVICE_Mute</STRONG> (ARM, 436 bytes, Stack size 16 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d1297c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_SoundMute
<LI><a href="#[d12a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Set_MIX
<LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
</UL>

<P><STRONG><a name="[d12b5c]"></a>BMK_Sound_Select</STRONG> (ARM, 112 bytes, Stack size 8 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d12a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Set_MIX
</UL>

<P><STRONG><a name="[d12b20]"></a>LAN_Sound_Select</STRONG> (ARM, 244 bytes, Stack size 8 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d12a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Set_MIX
</UL>

<P><STRONG><a name="[d12ae4]"></a>LAN_Sound_OUT</STRONG> (ARM, 112 bytes, Stack size 8 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d12a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Set_MIX
</UL>

<P><STRONG><a name="[d12aa8]"></a>Device_InVol</STRONG> (ARM, 396 bytes, Stack size 16 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundVolumeControl
</UL>
<BR>[Called By]<UL><LI><a href="#[d12904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Sound_Select
<LI><a href="#[d17cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT2258Init
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
<LI><a href="#[d6d128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Sound_Mute
</UL>

<P><STRONG><a name="[d12a6c]"></a>Device_Set_MIX</STRONG> (ARM, 416 bytes, Stack size 16 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN_Sound_OUT
<LI><a href="#[d12b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN_Sound_Select
<LI><a href="#[d12b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMK_Sound_Select
<LI><a href="#[d12b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_DEVICE_Mute
</UL>
<BR>[Called By]<UL><LI><a href="#[d129f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_OutVol
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6cf0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_LINK
<LI><a href="#[d6cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_ON
<LI><a href="#[d6d128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Sound_Mute
</UL>

<P><STRONG><a name="[d12a30]"></a>Device_Get_MIX</STRONG> (ARM, 12 bytes, Stack size 0 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d129f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_OutVol
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6cf0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_LINK
<LI><a href="#[d6cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_ON
<LI><a href="#[d6d128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Sound_Mute
</UL>

<P><STRONG><a name="[d129f4]"></a>Device_OutVol</STRONG> (ARM, 304 bytes, Stack size 24 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Get_MIX
<LI><a href="#[d12a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Set_MIX
<LI><a href="#[d12bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundVolumeControl
<LI><a href="#[d139a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d13a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_TB_state
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d17cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT2258Init
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6c570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SOUND_VOL
</UL>

<P><STRONG><a name="[d129b8]"></a>Device_Get_Vol</STRONG> (ARM, 164 bytes, Stack size 0 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d12904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Sound_Select
<LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
</UL>

<P><STRONG><a name="[d1297c]"></a>Device_SoundMute</STRONG> (ARM, 100 bytes, Stack size 8 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_DEVICE_Mute
</UL>

<P><STRONG><a name="[d12940]"></a>Device_Sound_Contrl</STRONG> (ARM, 80 bytes, Stack size 8 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
</UL>

<P><STRONG><a name="[d12904]"></a>Device_Sound_Select</STRONG> (ARM, 436 bytes, Stack size 16 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d129b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Get_Vol
<LI><a href="#[d12aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_InVol
<LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SOUND_SELECT
<LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
</UL>

<P><STRONG><a name="[d17cb0]"></a>PT2258Init</STRONG> (ARM, 308 bytes, Stack size 16 bytes, pt2258.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d129f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_OutVol
<LI><a href="#[d12aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_InVol
<LI><a href="#[d15c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_WriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
</UL>

<P><STRONG><a name="[d12274]"></a>RealTime_Get</STRONG> (ARM, 104 bytes, Stack size 0 bytes, realtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d12148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassTableWeekInit
<LI><a href="#[d12184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_init
<LI><a href="#[d121fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtime_IRQFlag
<LI><a href="#[d12238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_Get_Minute
<LI><a href="#[d6c1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read_CurDay
<LI><a href="#[d6c354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Class_Table_Check
<LI><a href="#[d6c8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_TIMEACTIVE
<LI><a href="#[d6d86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Time_Flash
</UL>

<P><STRONG><a name="[d12238]"></a>RealTime_Get_Minute</STRONG> (ARM, 44 bytes, Stack size 4 bytes, realtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Stat_Option
</UL>

<P><STRONG><a name="[d121fc]"></a>Rtime_IRQFlag</STRONG> (ARM, 140 bytes, Stack size 16 bytes, realtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_Get
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d121c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_IRQ
</UL>

<P><STRONG><a name="[d121c0]"></a>RealTime_IRQ</STRONG> (ARM, 276 bytes, Stack size 32 bytes, realtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d121fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtime_IRQFlag
</UL>

<P><STRONG><a name="[d12184]"></a>RealTime_init</STRONG> (ARM, 156 bytes, Stack size 8 bytes, realtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_Get
<LI><a href="#[d16f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVICIRQ
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d12148]"></a>ClassTableWeekInit</STRONG> (ARM, 40 bytes, Stack size 4 bytes, realtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d1210c]"></a>RealTime_Set</STRONG> (ARM, 128 bytes, Stack size 0 bytes, realtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6c9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SEVER_ACK
</UL>

<P><STRONG><a name="[d120d0]"></a>RealTime_Compare</STRONG> (ARM, 100 bytes, Stack size 8 bytes, realtime.o(.text), UNUSED)

<P><STRONG><a name="[d12094]"></a>RealTime_ALM_Set</STRONG> (ARM, 92 bytes, Stack size 0 bytes, realtime.o(.text), UNUSED)

<P><STRONG><a name="[d12058]"></a>RealTime_Msg_Set</STRONG> (ARM, 56 bytes, Stack size 0 bytes, realtime.o(.text), UNUSED)

<P><STRONG><a name="[d1201c]"></a>On_MSG_OPTION_CLASSTABLE_OFF</STRONG> (ARM, 4 bytes, Stack size 0 bytes, realtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d11fe0]"></a>RealTime_Check</STRONG> (ARM, 68 bytes, Stack size 0 bytes, realtime.o(.text), UNUSED)

<P><STRONG><a name="[d11fa4]"></a>On_MSG_OPTION_CLASSTABLE_ON</STRONG> (ARM, 4 bytes, Stack size 0 bytes, realtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d11f68]"></a>ON_MSG_OPTION_ALM_TIME</STRONG> (ARM, 4 bytes, Stack size 0 bytes, realtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d16ae0]"></a>SPI_Init</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sc16is752.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[d147b8]"></a>SPI_send</STRONG> (ARM, 48 bytes, Stack size 0 bytes, sc16is752.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d11af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_writeData
<LI><a href="#[d11b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_write
<LI><a href="#[d11b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_read
<LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
<LI><a href="#[d148a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_Reg_Write
</UL>

<P><STRONG><a name="[d11b6c]"></a>SPI_read</STRONG> (ARM, 144 bytes, Stack size 24 bytes, sc16is752.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SPI_read
</UL>
<BR>[Calls]<UL><LI><a href="#[d147b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_send
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d11a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS752_Scan
<LI><a href="#[d11ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadXuartBuff
</UL>

<P><STRONG><a name="[d11b30]"></a>SPI_write</STRONG> (ARM, 136 bytes, Stack size 24 bytes, sc16is752.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d147b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_send
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d11a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IS752_bps
</UL>

<P><STRONG><a name="[d11af4]"></a>SPI_writeData</STRONG> (ARM, 156 bytes, Stack size 24 bytes, sc16is752.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SPI_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[d147b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_send
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d11ab8]"></a>ReadXuartBuff</STRONG> (ARM, 124 bytes, Stack size 24 bytes, sc16is752.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ReadXuartBuff &rArr; SPI_read
</UL>
<BR>[Calls]<UL><LI><a href="#[d11b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d0edb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_Exception
</UL>

<P><STRONG><a name="[d11a7c]"></a>IS752_Scan</STRONG> (ARM, 240 bytes, Stack size 8 bytes, sc16is752.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = IS752_Scan &rArr; Xcom_set &rArr; UART_set_bps &rArr; set_IS752_bps &rArr; SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d1198c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xcom_set
<LI><a href="#[d11b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d0edb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_Exception
<LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d11a40]"></a>set_IS752_bps</STRONG> (ARM, 256 bytes, Stack size 24 bytes, sc16is752.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = set_IS752_bps &rArr; SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d11b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_write
<LI><a href="#[d6804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d0eea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_set_bps
</UL>

<P><STRONG><a name="[d11a04]"></a>init_SC16IS752</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sc16is752.o(.text), UNUSED)

<P><STRONG><a name="[d11608]"></a>OSAPIBlockNew</STRONG> (ARM, 28 bytes, Stack size 16 bytes, os_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d11590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[d17ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_init
</UL>

<P><STRONG><a name="[d115cc]"></a>OSAPIBlockEnter</STRONG> (ARM, 108 bytes, Stack size 24 bytes, os_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSAPIBlockEnter &rArr; OSMutexPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d11554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[d680c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d6999c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Send_ACK
<LI><a href="#[d69f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_ACK
<LI><a href="#[d6b3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_COMM
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>

<P><STRONG><a name="[d11068]"></a>Arp_Request</STRONG> (ARM, 188 bytes, Stack size 96 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Arp_Request &rArr; Ethernet_SendFrame &rArr; Send_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[d10ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendFrame
<LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d68574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d68718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0fc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_SendFrame
<LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d17e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_arp
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6c9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_STATUS_CHANGE
</UL>

<P><STRONG><a name="[d17e18]"></a>Initial_arp</STRONG> (ARM, 120 bytes, Stack size 8 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Debug_init
<LI><a href="#[d11068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Request
<LI><a href="#[d17bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
</UL>

<P><STRONG><a name="[d14164]"></a>Get_NetPort</STRONG> (ARM, 8 bytes, Stack size 0 bytes, arp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0fc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ReceivePacket
<LI><a href="#[d108ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_ReceivePacket
<LI><a href="#[d10ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Debug_init
<LI><a href="#[d141a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_init
<LI><a href="#[d150a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Input_Int
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d69f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_msg_rev
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6c96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SVRLINK_REQ
<LI><a href="#[d6cb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_DEBUG
</UL>

<P><STRONG><a name="[d1102c]"></a>Get_ClassID</STRONG> (ARM, 8 bytes, Stack size 0 bytes, arp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d69f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_ACK
</UL>

<P><STRONG><a name="[d10ff0]"></a>IPDword_TO_Byte</STRONG> (ARM, 40 bytes, Stack size 0 bytes, arp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d69f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_msg_rev
<LI><a href="#[d69f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_ACK
</UL>

<P><STRONG><a name="[d10fb4]"></a>IPByte_TO_Dword</STRONG> (ARM, 40 bytes, Stack size 0 bytes, arp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d69f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_ACK
</UL>

<P><STRONG><a name="[d10f78]"></a>Get_DesIp</STRONG> (ARM, 208 bytes, Stack size 0 bytes, arp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0fc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_SendFrame
<LI><a href="#[d10ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendFrame
<LI><a href="#[d140ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udp_SendPacked
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d69f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_ACK
<LI><a href="#[d6c7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_State
<LI><a href="#[d6c9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_STATUS_CHANGE
<LI><a href="#[d6ced0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_BREAK
<LI><a href="#[d6cf84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_OFF
<LI><a href="#[d6cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_ON
</UL>

<P><STRONG><a name="[d14128]"></a>IP_Compare</STRONG> (ARM, 84 bytes, Stack size 0 bytes, arp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0f3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN_Test_Ack
<LI><a href="#[d0fc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_SendFrame
<LI><a href="#[d10d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_MAC_Save
<LI><a href="#[d10d5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Check
<LI><a href="#[d10e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC_ARP_REQ
<LI><a href="#[d10e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Answer
<LI><a href="#[d10f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_Rec_Find
<LI><a href="#[d14254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Get_Play_No
<LI><a href="#[d14290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Close
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d6c9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_STATUS_CHANGE
</UL>

<P><STRONG><a name="[d10f3c]"></a>IPMASK_Compare</STRONG> (ARM, 280 bytes, Stack size 0 bytes, arp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0fc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_SendFrame
<LI><a href="#[d10d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_MAC_Save
<LI><a href="#[d10d5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Check
<LI><a href="#[d10e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC_ARP_REQ
<LI><a href="#[d10e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Answer
<LI><a href="#[d10f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_Rec_Find
</UL>

<P><STRONG><a name="[d10f00]"></a>ARP_Rec_Find</STRONG> (ARM, 260 bytes, Stack size 12 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ARP_Rec_Find
</UL>
<BR>[Calls]<UL><LI><a href="#[d10f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPMASK_Compare
<LI><a href="#[d14128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Compare
</UL>
<BR>[Called By]<UL><LI><a href="#[d0fc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_SendFrame
<LI><a href="#[d10ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendFrame
<LI><a href="#[d10ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_Rec_Save
<LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
<LI><a href="#[d6c9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_STATUS_CHANGE
</UL>

<P><STRONG><a name="[d10ec4]"></a>ARP_Rec_Save</STRONG> (ARM, 188 bytes, Stack size 16 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_Rec_Find
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d10d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_MAC_Save
<LI><a href="#[d10d5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Check
<LI><a href="#[d10e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC_ARP_REQ
<LI><a href="#[d10e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Answer
</UL>

<P><STRONG><a name="[d10e88]"></a>Arp_reg</STRONG> (ARM, 336 bytes, Stack size 128 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendFrame
</UL>

<P><STRONG><a name="[d10e4c]"></a>Arp_Answer</STRONG> (ARM, 248 bytes, Stack size 32 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendFrame
<LI><a href="#[d10ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_Rec_Save
<LI><a href="#[d10f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPMASK_Compare
<LI><a href="#[d14128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Compare
</UL>
<BR>[Called By]<UL><LI><a href="#[d10dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_ReceivePacket
</UL>

<P><STRONG><a name="[d10e10]"></a>REC_ARP_REQ</STRONG> (ARM, 144 bytes, Stack size 16 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_Rec_Save
<LI><a href="#[d10f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPMASK_Compare
<LI><a href="#[d14128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Compare
</UL>
<BR>[Called By]<UL><LI><a href="#[d10dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_ReceivePacket
</UL>

<P><STRONG><a name="[d10dd4]"></a>ARP_ReceivePacket</STRONG> (ARM, 60 bytes, Stack size 8 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REC_ARP_REQ
<LI><a href="#[d10e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Answer
</UL>
<BR>[Called By]<UL><LI><a href="#[d108e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_ReceivePacket
</UL>

<P><STRONG><a name="[d10d98]"></a>crc_calc</STRONG> (ARM, 192 bytes, Stack size 24 bytes, arp.o(.text), UNUSED)

<P><STRONG><a name="[d10d5c]"></a>IP_Check</STRONG> (ARM, 140 bytes, Stack size 16 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_Rec_Save
<LI><a href="#[d10f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPMASK_Compare
<LI><a href="#[d14128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Compare
</UL>
<BR>[Called By]<UL><LI><a href="#[d108ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_ReceivePacket
</UL>

<P><STRONG><a name="[d10d20]"></a>UDP_MAC_Save</STRONG> (ARM, 92 bytes, Stack size 16 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_Rec_Save
<LI><a href="#[d10f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPMASK_Compare
<LI><a href="#[d14128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Compare
</UL>

<P><STRONG><a name="[d10ce4]"></a>Ethernet_SendFrame</STRONG> (ARM, 164 bytes, Stack size 56 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Ethernet_SendFrame &rArr; Send_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[d10870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Packet
<LI><a href="#[d10f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_Rec_Find
<LI><a href="#[d10f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DesIp
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0fc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_SendFrame
<LI><a href="#[d10e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Answer
<LI><a href="#[d10e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_reg
<LI><a href="#[d11068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Request
</UL>

<P><STRONG><a name="[d108e8]"></a>Ethernet_ReceivePacket</STRONG> (ARM, 76 bytes, Stack size 8 bytes, ethernet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d108ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_ReceivePacket
<LI><a href="#[d10dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_ReceivePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[d101a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rec_Packet
</UL>

<P><STRONG><a name="[d103fc]"></a>EMAC_TxEnable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, hardware_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[d103c0]"></a>EMAC_TxDisable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, hardware_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[d10384]"></a>EMAC_RxEnable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, hardware_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[d10348]"></a>EMAC_RxDisable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, hardware_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[d1030c]"></a>Write_PHY</STRONG> (ARM, 92 bytes, Stack size 4 bytes, hardware_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[d102d0]"></a>Read_PHY</STRONG> (ARM, 100 bytes, Stack size 0 bytes, hardware_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[d10294]"></a>EMACTxDescriptorInit</STRONG> (ARM, 132 bytes, Stack size 0 bytes, hardware_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[d10258]"></a>EMACRxDescriptorInit</STRONG> (ARM, 136 bytes, Stack size 0 bytes, hardware_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d101e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACHandler
<LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[d1021c]"></a>SetMacID</STRONG> (ARM, 64 bytes, Stack size 0 bytes, hardware_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[d10870]"></a>Send_Packet</STRONG> (ARM, 368 bytes, Stack size 40 bytes, hardware_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Send_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d10ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendFrame
</UL>

<P><STRONG><a name="[d101e0]"></a>EMACHandler</STRONG> (ARM, 28 bytes, Stack size 8 bytes, hardware_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACRxDescriptorInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d10168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Exception
</UL>

<P><STRONG><a name="[d101a4]"></a>Rec_Packet</STRONG> (ARM, 164 bytes, Stack size 32 bytes, hardware_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d108e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_ReceivePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[d10168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Exception
</UL>

<P><STRONG><a name="[d10168]"></a>Ethernet_Exception</STRONG> (ARM, 60 bytes, Stack size 8 bytes, hardware_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d101a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rec_Packet
<LI><a href="#[d101e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACHandler
</UL>

<P><STRONG><a name="[d17e54]"></a>InitNet</STRONG> (ARM, 444 bytes, Stack size 16 bytes, hardware_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1021c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMacID
<LI><a href="#[d10258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACRxDescriptorInit
<LI><a href="#[d10294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACTxDescriptorInit
<LI><a href="#[d102d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_PHY
<LI><a href="#[d1030c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_PHY
<LI><a href="#[d10348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_RxDisable
<LI><a href="#[d10384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_RxEnable
<LI><a href="#[d103c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_TxDisable
<LI><a href="#[d103fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_TxEnable
<LI><a href="#[d10f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_Rec_Find
<LI><a href="#[d10f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DesIp
<LI><a href="#[d16c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_IC_Reset
<LI><a href="#[d16f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVICIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
</UL>

<P><STRONG><a name="[d1012c]"></a>swap_int16</STRONG> (ARM, 36 bytes, Stack size 0 bytes, hardware_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0fc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ReceivePacket
<LI><a href="#[d0fc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_ReceivePacket
<LI><a href="#[d140ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udp_SendPacked
</UL>

<P><STRONG><a name="[d100f0]"></a>swap_int32</STRONG> (ARM, 56 bytes, Stack size 8 bytes, hardware_int.o(.text), UNUSED)

<P><STRONG><a name="[d100b4]"></a>Char2ToInt16</STRONG> (ARM, 36 bytes, Stack size 0 bytes, hardware_int.o(.text), UNUSED)

<P><STRONG><a name="[d10078]"></a>Char4ToInt32</STRONG> (ARM, 52 bytes, Stack size 0 bytes, hardware_int.o(.text), UNUSED)

<P><STRONG><a name="[d0fcb8]"></a>CreateIpHeadCrc</STRONG> (ARM, 132 bytes, Stack size 4 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CreateIpHeadCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[d0fc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_ReceivePacket
<LI><a href="#[d0fc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_SendFrame
</UL>

<P><STRONG><a name="[d0fc7c]"></a>IP_SendFrame</STRONG> (ARM, 772 bytes, Stack size 96 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = IP_SendFrame &rArr; Arp_Request &rArr; Ethernet_SendFrame &rArr; Send_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[d0fcb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateIpHeadCrc
<LI><a href="#[d10ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendFrame
<LI><a href="#[d10f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_Rec_Find
<LI><a href="#[d10f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPMASK_Compare
<LI><a href="#[d10f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DesIp
<LI><a href="#[d11068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Request
<LI><a href="#[d14128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Compare
<LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0f790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ping_Precess
<LI><a href="#[d0fc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_ReceivePacket
<LI><a href="#[d140ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udp_SendPacked
</UL>

<P><STRONG><a name="[d108ac]"></a>IP_ReceivePacket</STRONG> (ARM, 152 bytes, Stack size 24 bytes, ip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0fc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ReceivePacket
<LI><a href="#[d0fc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_ReceivePacket
<LI><a href="#[d10d5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Check
<LI><a href="#[d14164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[d108e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_ReceivePacket
</UL>

<P><STRONG><a name="[d0f808]"></a>CreateIcmpCrc</STRONG> (ARM, 128 bytes, Stack size 20 bytes, icmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0f790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ping_Precess
<LI><a href="#[d0fc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_ReceivePacket
</UL>

<P><STRONG><a name="[d0f7cc]"></a>CreateIcmpCrc1</STRONG> (ARM, 128 bytes, Stack size 20 bytes, icmp.o(.text), UNUSED)

<P><STRONG><a name="[d0fc40]"></a>ICMP_ReceivePacket</STRONG> (ARM, 276 bytes, Stack size 96 bytes, icmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0f808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateIcmpCrc
<LI><a href="#[d0fc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_SendFrame
<LI><a href="#[d0fcb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateIpHeadCrc
<LI><a href="#[d1012c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_int16
<LI><a href="#[d68574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d108ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_ReceivePacket
</UL>

<P><STRONG><a name="[d0f790]"></a>Ping_Precess</STRONG> (ARM, 160 bytes, Stack size 88 bytes, icmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0f808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateIcmpCrc
<LI><a href="#[d0fc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_SendFrame
<LI><a href="#[d68574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[d0f40c]"></a>CheckSumUdp</STRONG> (ARM, 132 bytes, Stack size 4 bytes, udp.o(.text), UNUSED)

<P><STRONG><a name="[d0fc04]"></a>UDP_ReceivePacket</STRONG> (ARM, 348 bytes, Stack size 88 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0f394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Q_Send
<LI><a href="#[d0f3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN_Test_Ack
<LI><a href="#[d1012c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_int16
<LI><a href="#[d14164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NetPort
<LI><a href="#[d14218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Save_PlayData
<LI><a href="#[d14308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Echo_Contrl
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d108ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_ReceivePacket
</UL>

<P><STRONG><a name="[d140ec]"></a>Udp_SendPacked</STRONG> (ARM, 272 bytes, Stack size 64 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Udp_SendPacked &rArr; IP_SendFrame &rArr; Arp_Request &rArr; Ethernet_SendFrame &rArr; Send_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[d0fc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_SendFrame
<LI><a href="#[d1012c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_int16
<LI><a href="#[d10f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DesIp
<LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0f3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN_Test_Ack
<LI><a href="#[d150a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Input_Int
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d69f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_ACK
<LI><a href="#[d6b3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_COMM
</UL>

<P><STRONG><a name="[d0eea8]"></a>UART_set_bps</STRONG> (ARM, 488 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = UART_set_bps &rArr; set_IS752_bps &rArr; SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d11a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IS752_bps
<LI><a href="#[d6804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d1198c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xcom_set
</UL>

<P><STRONG><a name="[d0ee6c]"></a>UART_PutChar</STRONG> (ARM, 160 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d0ee30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutString
</UL>

<P><STRONG><a name="[d0ee30]"></a>UART_PutString</STRONG> (ARM, 48 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0ee6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>

<P><STRONG><a name="[d0edf4]"></a>UART_Send_Data</STRONG> (ARM, 168 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = UART_Send_Data &rArr; SPI_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[d0ee6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
<LI><a href="#[d11af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_writeData
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d0ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Exception
<LI><a href="#[d0ed04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Exception
<LI><a href="#[d0ed40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Exception
<LI><a href="#[d0ed7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Exception
<LI><a href="#[d6999c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Send_ACK
<LI><a href="#[d6b3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_COMM
<LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
<LI><a href="#[d6c840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION
<LI><a href="#[d6c87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_Power_OPTION
<LI><a href="#[d6c8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_RepeatPower_OPTION
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>

<P><STRONG><a name="[d0edb8]"></a>EINT1_Exception</STRONG> (ARM, 664 bytes, Stack size 88 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = EINT1_Exception &rArr; IS752_Scan &rArr; Xcom_set &rArr; UART_set_bps &rArr; set_IS752_bps &rArr; SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d0ec14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Rec_Del
<LI><a href="#[d0ec50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[d0f394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Q_Send
<LI><a href="#[d11a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS752_Scan
<LI><a href="#[d11ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadXuartBuff
<LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[d0ed7c]"></a>UART0_Exception</STRONG> (ARM, 268 bytes, Stack size 40 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0ec50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d0f394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Q_Send
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[d0ed40]"></a>UART1_Exception</STRONG> (ARM, 268 bytes, Stack size 40 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0ec50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d0f394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Q_Send
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[d0ed04]"></a>UART2_Exception</STRONG> (ARM, 312 bytes, Stack size 40 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0ec50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d0f394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Q_Send
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[d0ecc8]"></a>UART3_Exception</STRONG> (ARM, 268 bytes, Stack size 40 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0ec50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d0f394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Q_Send
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[d0ec8c]"></a>UART_init</STRONG> (ARM, 116 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVICIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d17ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_init
</UL>

<P><STRONG><a name="[d0d24c]"></a>OSInitHookBegin</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d17ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d0d210]"></a>OSInitHookEnd</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d17ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d0d1d4]"></a>OSTaskCreateHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d72768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[d0d198]"></a>OSTaskDelHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d70314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[d0d15c]"></a>OSTaskIdleHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d72ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[d0d120]"></a>OSTaskStatHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d72aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[d0d0e4]"></a>OSTaskStkInit</STRONG> (ARM, 296 bytes, Stack size 12 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d17d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d7038c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[d0e6ec]"></a>OSTaskSwHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(CODE)
</UL>
<P><STRONG><a name="[d0d0a8]"></a>OSTCBInitHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d72768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[d0d06c]"></a>OSTimeTickHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d16b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[d0d030]"></a>OS_CPU_InitExceptVect</STRONG> (ARM, 120 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[d739b0]"></a>OSDebugInit</STRONG> (ARM, 188 bytes, Stack size 0 bytes, os_dbg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d17ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d72c18]"></a>OS_StrCopy</STRONG> (ARM, 52 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7029c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[d71700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[d7173c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[d72114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[d72150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[d7272c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d72b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[d72bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[d72bdc]"></a>OSEventNameGet</STRONG> (ARM, 188 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[d72ba0]"></a>OS_StrLen</STRONG> (ARM, 40 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d71700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[d72114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[d7272c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d72b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[d72b64]"></a>OSEventNameSet</STRONG> (ARM, 212 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[d72c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[d72b28]"></a>OS_TaskStatStkChk</STRONG> (ARM, 108 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d726f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[d72aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[d72aec]"></a>OS_TaskStat</STRONG> (ARM, 236 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[d1396c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d6804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d72b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[d72ab0]"></a>OS_TaskIdle</STRONG> (ARM, 56 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0d15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d72a74]"></a>OS_MemClr</STRONG> (ARM, 36 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7263c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[d72678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[d726b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[d7353c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[d73578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[d17ddc]"></a>OSInit</STRONG> (ARM, 60 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[d0d24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[d7263c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[d72678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[d726b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[d734c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[d73500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[d7353c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[d73578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[d735b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[d735f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[d739b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d17f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d72a38]"></a>OSIntEnter</STRONG> (ARM, 56 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[d0e890]"></a>OSIntExit</STRONG> (ARM, 216 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0e944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d73488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(CODE)
</UL>
<P><STRONG><a name="[d729fc]"></a>OSSchedLock</STRONG> (ARM, 100 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d729c0]"></a>OS_Sched</STRONG> (ARM, 164 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0e980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d73488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[d0ec50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[d11554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[d1396c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d17d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d6fe28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[d70224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d70260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[d70314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[d7038c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d703c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[d70cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[d70cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[d70d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[d70d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[d70da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[d70e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[d71250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[d7128c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[d71b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[d71bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[d71bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[d71c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[d72060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[d720d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[d7218c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[d72984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[d72984]"></a>OSSchedUnlock</STRONG> (ARM, 156 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d17da0]"></a>OSStart</STRONG> (ARM, 92 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[d0e9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[d73488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[d17f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d72948]"></a>OSStatInit</STRONG> (ARM, 104 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1396c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d16b58]"></a>OSTimeTick</STRONG> (ARM, 388 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0d06c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d16edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Exception
</UL>

<P><STRONG><a name="[d7290c]"></a>OSVersion</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[d728d0]"></a>OS_Dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d70314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[d72894]"></a>OS_EventTaskRdy</STRONG> (ARM, 212 bytes, Stack size 28 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0ec50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[d70cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[d70cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[d70d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[d70d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[d70e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[d71250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[d7128c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[d71b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[d71bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[d71c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
</UL>

<P><STRONG><a name="[d72858]"></a>OS_EventTaskWait</STRONG> (ARM, 188 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d11554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[d70da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[d71bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>

<P><STRONG><a name="[d7281c]"></a>OS_EventTOAbort</STRONG> (ARM, 128 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d11554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[d70da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[d71bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>

<P><STRONG><a name="[d727e0]"></a>OS_EventWaitListInit</STRONG> (ARM, 48 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d11590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[d70e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[d71c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>

<P><STRONG><a name="[d727a4]"></a>OS_MemCopy</STRONG> (ARM, 36 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d701e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[d72768]"></a>OS_TCBInit</STRONG> (ARM, 424 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d0a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[d0d1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d17d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d7038c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[d72240]"></a>OSFlagAccept</STRONG> (ARM, 432 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d72204]"></a>OSFlagCreate</STRONG> (ARM, 172 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d721c8]"></a>OS_FlagUnlink</STRONG> (ARM, 84 bytes, Stack size 4 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d70314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[d720d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[d723a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[d7218c]"></a>OSFlagDel</STRONG> (ARM, 404 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d723a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d72150]"></a>OSFlagNameGet</STRONG> (ARM, 140 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[d72114]"></a>OSFlagNameSet</STRONG> (ARM, 164 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[d72c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[d720d8]"></a>OSFlagPend</STRONG> (ARM, 1016 bytes, Stack size 72 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d721c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[d7236c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d7209c]"></a>OSFlagPendGetFlagsRdy</STRONG> (ARM, 48 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d72060]"></a>OSFlagPost</STRONG> (ARM, 548 bytes, Stack size 48 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d723a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d72024]"></a>OSFlagQuery</STRONG> (ARM, 84 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d726b4]"></a>OS_FlagInit</STRONG> (ARM, 132 bytes, Stack size 16 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d72a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d17ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d71ca0]"></a>OSMboxAccept</STRONG> (ARM, 72 bytes, Stack size 16 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d71c64]"></a>OSMboxCreate</STRONG> (ARM, 156 bytes, Stack size 16 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d727e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d17ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_init
</UL>

<P><STRONG><a name="[d71c28]"></a>OSMboxDel</STRONG> (ARM, 408 bytes, Stack size 32 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d71bec]"></a>OSMboxPend</STRONG> (ARM, 436 bytes, Stack size 32 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d7281c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTOAbort
<LI><a href="#[d72858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[d6d704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_IRQ_Read
</UL>

<P><STRONG><a name="[d71bb0]"></a>OSMboxPendAbort</STRONG> (ARM, 232 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d0ec50]"></a>OSMboxPost</STRONG> (ARM, 148 bytes, Stack size 16 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[d0ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Exception
<LI><a href="#[d0ed04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Exception
<LI><a href="#[d0ed40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Exception
<LI><a href="#[d0ed7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Exception
<LI><a href="#[d0edb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_Exception
</UL>

<P><STRONG><a name="[d71b74]"></a>OSMboxPostOpt</STRONG> (ARM, 208 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d71b38]"></a>OSMboxQuery</STRONG> (ARM, 120 bytes, Stack size 32 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d717b4]"></a>OSMemCreate</STRONG> (ARM, 196 bytes, Stack size 40 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_init
</UL>

<P><STRONG><a name="[d71778]"></a>OSMemGet</STRONG> (ARM, 112 bytes, Stack size 24 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
</UL>

<P><STRONG><a name="[d7173c]"></a>OSMemNameGet</STRONG> (ARM, 104 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[d71700]"></a>OSMemNameSet</STRONG> (ARM, 132 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[d72c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[d716c4]"></a>OSMemPut</STRONG> (ARM, 100 bytes, Stack size 16 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
</UL>

<P><STRONG><a name="[d71688]"></a>OSMemQuery</STRONG> (ARM, 100 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d72678]"></a>OS_MemInit</STRONG> (ARM, 128 bytes, Stack size 16 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d72a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d17ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d712c8]"></a>OSMutexAccept</STRONG> (ARM, 244 bytes, Stack size 24 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d11590]"></a>OSMutexCreate</STRONG> (ARM, 256 bytes, Stack size 24 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d727e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d11608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAPIBlockNew
</UL>

<P><STRONG><a name="[d7128c]"></a>OSMutexDel</STRONG> (ARM, 504 bytes, Stack size 40 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d713f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
<LI><a href="#[d72894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d11554]"></a>OSMutexPend</STRONG> (ARM, 1008 bytes, Stack size 48 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSMutexPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d7281c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTOAbort
<LI><a href="#[d72858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[d115cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAPIBlockEnter
</UL>

<P><STRONG><a name="[d71250]"></a>OSMutexPost</STRONG> (ARM, 324 bytes, Stack size 24 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSMutexPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d713f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
<LI><a href="#[d72894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[d17ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_init
<LI><a href="#[d6999c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Send_ACK
<LI><a href="#[d69f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_ACK
<LI><a href="#[d6b3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_COMM
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>

<P><STRONG><a name="[d71214]"></a>OSMutexQuery</STRONG> (ARM, 188 bytes, Stack size 32 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d70e90]"></a>OSQAccept</STRONG> (ARM, 164 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d70e54]"></a>OSQCreate</STRONG> (ARM, 276 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d727e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d17ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_init
<LI><a href="#[d17d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Option_init
</UL>

<P><STRONG><a name="[d70e18]"></a>OSQDel</STRONG> (ARM, 464 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d70ddc]"></a>OSQFlush</STRONG> (ARM, 68 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d70da0]"></a>OSQPend</STRONG> (ARM, 456 bytes, Stack size 32 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d7281c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTOAbort
<LI><a href="#[d72858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d17c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_UART
</UL>

<P><STRONG><a name="[d70d64]"></a>OSQPendAbort</STRONG> (ARM, 232 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d70d28]"></a>OSQPost</STRONG> (ARM, 208 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[d0f394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Q_Send
<LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
</UL>

<P><STRONG><a name="[d70cec]"></a>OSQPostFront</STRONG> (ARM, 212 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d70cb0]"></a>OSQPostOpt</STRONG> (ARM, 324 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d70c74]"></a>OSQQuery</STRONG> (ARM, 168 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d7263c]"></a>OS_QInit</STRONG> (ARM, 88 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d72a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d17ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d703c8]"></a>OSTaskChangePrio</STRONG> (ARM, 492 bytes, Stack size 48 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d7038c]"></a>OSTaskCreate</STRONG> (ARM, 248 bytes, Stack size 48 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0d0e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d70350]"></a>OS_TaskStkClr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d17d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[d17d64]"></a>OSTaskCreateExt</STRONG> (ARM, 288 bytes, Stack size 64 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d0e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d70350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[d72768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[d17f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
<LI><a href="#[d735b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[d735f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[d70314]"></a>OSTaskDel</STRONG> (ARM, 580 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0d198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d721c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[d728d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d702d8]"></a>OSTaskDelReq</STRONG> (ARM, 164 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d7029c]"></a>OSTaskNameGet</STRONG> (ARM, 196 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[d7272c]"></a>OSTaskNameSet</STRONG> (ARM, 216 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d72ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[d72c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[d735b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[d735f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[d70260]"></a>OSTaskResume</STRONG> (ARM, 260 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d726f0]"></a>OSTaskStkChk</STRONG> (ARM, 212 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d72b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[d70224]"></a>OSTaskSuspend</STRONG> (ARM, 248 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d701e8]"></a>OSTaskQuery</STRONG> (ARM, 136 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d727a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>

<P><STRONG><a name="[d1396c]"></a>OSTimeDly</STRONG> (ARM, 172 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[d13a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_DCS_open
<LI><a href="#[d6ac20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PC_Power
<LI><a href="#[d6bfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TB_Select
<LI><a href="#[d6c3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_IO_TEST
<LI><a href="#[d6fe64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[d72948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[d72aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[d6fe64]"></a>OSTimeDlyHMSM</STRONG> (ARM, 164 bytes, Stack size 32 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1396c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d6804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[d6fe28]"></a>OSTimeDlyResume</STRONG> (ARM, 276 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d6fdec]"></a>OSTimeGet</STRONG> (ARM, 44 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d6fdb0]"></a>OSTimeSet</STRONG> (ARM, 44 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d16a68]"></a>uart_Debug_init</STRONG> (ARM, 100 bytes, Stack size 8 bytes, user_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = uart_Debug_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d17bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[d10ca8]"></a>IP_Debug_init</STRONG> (ARM, 44 bytes, Stack size 8 bytes, user_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d14164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NetPort
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d17e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_arp
</UL>

<P><STRONG><a name="[d17bc0]"></a>UART_printf</STRONG> (ARM, 128 bytes, Stack size 112 bytes, user_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = UART_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d68a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[d69618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d17a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[d17bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
<LI><a href="#[d17c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_UART
<LI><a href="#[d17cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_init
<LI><a href="#[d17e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_arp
<LI><a href="#[d17f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
<LI><a href="#[d6c0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_UserProgram_Write
</UL>

<P><STRONG><a name="[d6f540]"></a>ID_Change</STRONG> (ARM, 48 bytes, Stack size 32 bytes, user_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d69618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf (via Veneer)
</UL>

<P><STRONG><a name="[d17e90]"></a>IP_printf</STRONG> (ARM, 196 bytes, Stack size 56 bytes, user_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = IP_printf &rArr; Udp_SendPacked &rArr; IP_SendFrame &rArr; Arp_Request &rArr; Ethernet_SendFrame &rArr; Send_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[d10f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DesIp
<LI><a href="#[d140ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udp_SendPacked
<LI><a href="#[d14164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NetPort
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d68718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d68a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[d69618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d129f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_OutVol
<LI><a href="#[d141a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_init
<LI><a href="#[d14290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Close
<LI><a href="#[d142cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Open
<LI><a href="#[d165b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_XM_start
<LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d17c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_UART
<LI><a href="#[d17e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_arp
<LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
<LI><a href="#[d6ac20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PC_Power
<LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6b544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_ID_Read
<LI><a href="#[d6c048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Set
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6c138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Read
<LI><a href="#[d6c3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_IO_TEST
<LI><a href="#[d6c408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_TEST_IO
<LI><a href="#[d6c7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_State
<LI><a href="#[d6cb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_DEBUG
<LI><a href="#[d6d038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASS_OVER
<LI><a href="#[d6d074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASS_BEGIN
<LI><a href="#[d6d0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_MSG_RUN
<LI><a href="#[d6d7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_CMD
</UL>

<P><STRONG><a name="[d6efa0]"></a>InitIAP</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lp2368_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6ca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SERVER_FILE_SEND
<LI><a href="#[d6ed84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Flash
</UL>

<P><STRONG><a name="[d6ef64]"></a>SelSector</STRONG> (ARM, 72 bytes, Stack size 16 bytes, lp2368_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6ca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SERVER_FILE_SEND
<LI><a href="#[d6ed84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Flash
</UL>

<P><STRONG><a name="[d6ef28]"></a>RamToFlash</STRONG> (ARM, 92 bytes, Stack size 16 bytes, lp2368_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6ca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SERVER_FILE_SEND
<LI><a href="#[d6ed84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Flash
</UL>

<P><STRONG><a name="[d6eeec]"></a>EraseSector</STRONG> (ARM, 84 bytes, Stack size 16 bytes, lp2368_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6ed84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Flash
</UL>

<P><STRONG><a name="[d6eeb0]"></a>BlankCHK</STRONG> (ARM, 72 bytes, Stack size 16 bytes, lp2368_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
</UL>

<P><STRONG><a name="[d6ee74]"></a>ReadParID</STRONG> (ARM, 56 bytes, Stack size 8 bytes, lp2368_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6ed84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Flash
</UL>

<P><STRONG><a name="[d6ee38]"></a>BootCodeID</STRONG> (ARM, 56 bytes, Stack size 8 bytes, lp2368_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6ed84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Flash
</UL>

<P><STRONG><a name="[d6edfc]"></a>Get_ClassInfo_Table</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lp2368_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6acd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraInit
<LI><a href="#[d6b418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Use_Stat_Read
<LI><a href="#[d6b454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraPowerInit
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6b4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Link
<LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6b5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[d6c084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Option_Find
<LI><a href="#[d6c138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Read
<LI><a href="#[d6c2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Find
<LI><a href="#[d6c318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Class_Task_Start
<LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
<LI><a href="#[d6c840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION
<LI><a href="#[d6c87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_Power_OPTION
<LI><a href="#[d6c8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_RepeatPower_OPTION
<LI><a href="#[d6ca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SERVER_FILE_SEND
<LI><a href="#[d6d0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_MSG_RUN
</UL>

<P><STRONG><a name="[d6edc0]"></a>Compare</STRONG> (ARM, 80 bytes, Stack size 16 bytes, lp2368_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6ed84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Flash
</UL>

<P><STRONG><a name="[d6ed84]"></a>Test_Flash</STRONG> (ARM, 184 bytes, Stack size 272 bytes, lp2368_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d689ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d6edc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare
<LI><a href="#[d6ee38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootCodeID
<LI><a href="#[d6ee74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParID
<LI><a href="#[d6eeec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
<LI><a href="#[d6ef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamToFlash
<LI><a href="#[d6ef64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelSector
<LI><a href="#[d6efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIAP
</UL>

<P><STRONG><a name="[d17b48]"></a>User_mem_init</STRONG> (ARM, 68 bytes, Stack size 8 bytes, user_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d717b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
</UL>

<P><STRONG><a name="[d163d8]"></a>User_mem_allco</STRONG> (ARM, 140 bytes, Stack size 24 bytes, user_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = User_mem_allco &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d71778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d0f394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Q_Send
<LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d165b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_XM_start
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d6b418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Use_Stat_Read
<LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6c138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Read
<LI><a href="#[d6c228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read
<LI><a href="#[d6c264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Stat_Save
<LI><a href="#[d6ca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SERVER_FILE_SEND
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>

<P><STRONG><a name="[d1639c]"></a>User_mem_free</STRONG> (ARM, 232 bytes, Stack size 16 bytes, user_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = User_mem_free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d716c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
</UL>
<BR>[Called By]<UL><LI><a href="#[d0ec14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Rec_Del
<LI><a href="#[d0f394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Q_Send
<LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d165b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_XM_start
<LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d17c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_UART
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d6b418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Use_Stat_Read
<LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6c138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Read
<LI><a href="#[d6c228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read
<LI><a href="#[d6c264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Stat_Save
<LI><a href="#[d6c8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_TIMEACTIVE
<LI><a href="#[d6ca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SERVER_FILE_SEND
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>

<P><STRONG><a name="[d6e2bc]"></a>SetAddress</STRONG> (ARM, 24 bytes, Stack size 0 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6e280]"></a>CheckSum1</STRONG> (ARM, 60 bytes, Stack size 0 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6dec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FocusFarCmd
<LI><a href="#[d6defc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FocusNearCmd
<LI><a href="#[d6df38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPrepositionCmd
<LI><a href="#[d6df74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrepositionCmd
<LI><a href="#[d6dfb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoPrepositionCmd
<LI><a href="#[d6dfec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCmd
<LI><a href="#[d6e028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRightDownCmd
<LI><a href="#[d6e064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRightUpCmd
<LI><a href="#[d6e0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeftDownCmd
<LI><a href="#[d6e0dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeftUpCmd
<LI><a href="#[d6e118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZoomOutCmd
<LI><a href="#[d6e154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZoomInCmd
<LI><a href="#[d6e190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnDownCmd
<LI><a href="#[d6e1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnUpCmd
<LI><a href="#[d6e208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeftCmd
<LI><a href="#[d6e244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRightCmd
</UL>

<P><STRONG><a name="[d6e244]"></a>TurnRightCmd</STRONG> (ARM, 68 bytes, Stack size 16 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6e208]"></a>TurnLeftCmd</STRONG> (ARM, 76 bytes, Stack size 16 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6e1cc]"></a>TurnUpCmd</STRONG> (ARM, 76 bytes, Stack size 16 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6e190]"></a>TurnDownCmd</STRONG> (ARM, 76 bytes, Stack size 16 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6e154]"></a>ZoomInCmd</STRONG> (ARM, 72 bytes, Stack size 8 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6e118]"></a>ZoomOutCmd</STRONG> (ARM, 72 bytes, Stack size 8 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6e0dc]"></a>TurnLeftUpCmd</STRONG> (ARM, 76 bytes, Stack size 16 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6e0a0]"></a>TurnLeftDownCmd</STRONG> (ARM, 76 bytes, Stack size 16 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6e064]"></a>TurnRightUpCmd</STRONG> (ARM, 76 bytes, Stack size 16 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6e028]"></a>TurnRightDownCmd</STRONG> (ARM, 76 bytes, Stack size 16 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6dfec]"></a>StopCmd</STRONG> (ARM, 64 bytes, Stack size 8 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6dfb0]"></a>GotoPrepositionCmd</STRONG> (ARM, 80 bytes, Stack size 16 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6df74]"></a>SetPrepositionCmd</STRONG> (ARM, 80 bytes, Stack size 16 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6df38]"></a>ClearPrepositionCmd</STRONG> (ARM, 80 bytes, Stack size 16 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>

<P><STRONG><a name="[d6defc]"></a>FocusNearCmd</STRONG> (ARM, 72 bytes, Stack size 8 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6dec0]"></a>FocusFarCmd</STRONG> (ARM, 68 bytes, Stack size 8 bytes, pelcod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d6d920]"></a>Get_KeyData</STRONG> (ARM, 8 bytes, Stack size 0 bytes, use_key.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
</UL>

<P><STRONG><a name="[d6d8e4]"></a>KEY_Set_Vol</STRONG> (ARM, 104 bytes, Stack size 40 bytes, use_key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_IRQ_Recive_Open
<LI><a href="#[d6d704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_IRQ_Read
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
</UL>

<P><STRONG><a name="[d6d8a8]"></a>LED_Contrl</STRONG> (ARM, 184 bytes, Stack size 48 bytes, use_key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_IRQ_Recive_Open
<LI><a href="#[d6d704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_IRQ_Read
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d6d038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASS_OVER
<LI><a href="#[d6d074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASS_BEGIN
<LI><a href="#[d6d128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Sound_Mute
</UL>

<P><STRONG><a name="[d139a8]"></a>LED_Set</STRONG> (ARM, 532 bytes, Stack size 4 bytes, use_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LED_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[d129f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_OutVol
<LI><a href="#[d13ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Scan
<LI><a href="#[d17a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
<LI><a href="#[d6c390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_LEDContrl
<LI><a href="#[d6ced0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_BREAK
<LI><a href="#[d6cf0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_LINK
<LI><a href="#[d6d038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASS_OVER
<LI><a href="#[d6d0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_MSG_RUN
<LI><a href="#[d6d7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_CMD
<LI><a href="#[d6d830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_device_set
</UL>

<P><STRONG><a name="[d6d86c]"></a>LED_Time_Flash</STRONG> (ARM, 156 bytes, Stack size 48 bytes, use_key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_Get
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_IRQ_Recive_Open
<LI><a href="#[d6d704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_IRQ_Read
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d17a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[d6c9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SEVER_ACK
</UL>

<P><STRONG><a name="[d139e4]"></a>LED_SendFLASH</STRONG> (ARM, 364 bytes, Stack size 48 bytes, use_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = LED_SendFLASH &rArr; XCOM_Data_send &rArr; Task_Run_Delay &rArr; User_mem_allco &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_IRQ_Recive_Open
<LI><a href="#[d6d704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_IRQ_Read
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d129f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_OutVol
<LI><a href="#[d13ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Scan
<LI><a href="#[d17a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
<LI><a href="#[d6c390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_LEDContrl
<LI><a href="#[d6ced0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_BREAK
<LI><a href="#[d6cf0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_LINK
<LI><a href="#[d6d038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASS_OVER
<LI><a href="#[d6d0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_MSG_RUN
<LI><a href="#[d6d7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_CMD
</UL>

<P><STRONG><a name="[d17a94]"></a>key_init</STRONG> (ARM, 576 bytes, Stack size 32 bytes, use_key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d139a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d17bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
<LI><a href="#[d6d77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_Read
<LI><a href="#[d6d86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Time_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
<LI><a href="#[d6d074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASS_BEGIN
</UL>

<P><STRONG><a name="[d6d830]"></a>LED_device_set</STRONG> (ARM, 1060 bytes, Stack size 16 bytes, use_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_device_set &rArr; LED_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[d139a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[d6d7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_CMD
</UL>

<P><STRONG><a name="[d13a20]"></a>Key_TB_state</STRONG> (ARM, 56 bytes, Stack size 0 bytes, use_key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d129f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_OutVol
<LI><a href="#[d13ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Scan
<LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
<LI><a href="#[d6ced0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_BREAK
<LI><a href="#[d6cf0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_LINK
<LI><a href="#[d6d7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_CMD
</UL>

<P><STRONG><a name="[d6d7f4]"></a>KEY_CMD</STRONG> (ARM, 5156 bytes, Stack size 32 bytes, use_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = KEY_CMD &rArr; IP_printf &rArr; Udp_SendPacked &rArr; IP_SendFrame &rArr; Arp_Request &rArr; Ethernet_SendFrame &rArr; Send_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d139a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d13a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_TB_state
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d6d830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_device_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d6d7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_msg_rev
</UL>

<P><STRONG><a name="[d6d7b8]"></a>key_msg_rev</STRONG> (ARM, 292 bytes, Stack size 24 bytes, use_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = key_msg_rev &rArr; KEY_CMD &rArr; IP_printf &rArr; Udp_SendPacked &rArr; IP_SendFrame &rArr; Arp_Request &rArr; Ethernet_SendFrame &rArr; Send_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[d6d7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d698e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_MB
</UL>

<P><STRONG><a name="[d6d128]"></a>ON_Sound_Mute</STRONG> (ARM, 540 bytes, Stack size 24 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Get_MIX
<LI><a href="#[d12a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Set_MIX
<LI><a href="#[d12aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_InVol
<LI><a href="#[d12bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundVolumeControl
<LI><a href="#[d6d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Contrl
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6d0ec]"></a>On_MSG_OPTION_MSG_RUN</STRONG> (ARM, 492 bytes, Stack size 56 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0ec14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Rec_Del
<LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d139a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
<LI><a href="#[d6bf94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Rec_Find
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6d0b0]"></a>On_MSG_OPTION_POWER</STRONG> (ARM, 44 bytes, Stack size 24 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6c048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6d074]"></a>On_MSG_OPTION_CLASS_BEGIN</STRONG> (ARM, 292 bytes, Stack size 16 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d17a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d6c318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Class_Task_Start
<LI><a href="#[d6d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Contrl
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6d038]"></a>On_MSG_OPTION_CLASS_OVER</STRONG> (ARM, 336 bytes, Stack size 16 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d139a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d6c264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Stat_Save
<LI><a href="#[d6c318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Class_Task_Start
<LI><a href="#[d6d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Contrl
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cffc]"></a>On_MSG_OPTION_RF_ACTIVE</STRONG> (ARM, 12 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cfc0]"></a>On_MSG_OPTION_HELP_ON</STRONG> (ARM, 164 bytes, Stack size 40 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DesIp
<LI><a href="#[d12a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Get_MIX
<LI><a href="#[d12a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Set_MIX
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cf84]"></a>On_MSG_OPTION_HELP_OFF</STRONG> (ARM, 124 bytes, Stack size 32 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DesIp
<LI><a href="#[d14290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Close
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cf48]"></a>On_MSG_OPTION_HELP_TEST</STRONG> (ARM, 44 bytes, Stack size 16 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d142cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cf0c]"></a>On_MSG_OPTION_HELP_LINK</STRONG> (ARM, 104 bytes, Stack size 16 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Get_MIX
<LI><a href="#[d12a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Set_MIX
<LI><a href="#[d139a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d13a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_TB_state
<LI><a href="#[d14290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Close
<LI><a href="#[d142cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6ced0]"></a>On_MSG_OPTION_HELP_BREAK</STRONG> (ARM, 152 bytes, Stack size 32 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DesIp
<LI><a href="#[d139a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d13a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_TB_state
<LI><a href="#[d14290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Close
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6ce94]"></a>On_MSG_OPTION_AUTO_ON</STRONG> (ARM, 36 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6ce58]"></a>On_MSG_OPTION_AUTO_OFF</STRONG> (ARM, 44 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6ce1c]"></a>On_MSG_OPTION_DEV_REMOTE_ON</STRONG> (ARM, 88 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cde0]"></a>On_MSG_OPTION_REC_REMOTE_ON</STRONG> (ARM, 88 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cda4]"></a>On_MSG_OPTION_DEV_REMOTE_OFF</STRONG> (ARM, 32 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cd68]"></a>On_MSG_OPTION_REC_REMOTE_OFF</STRONG> (ARM, 32 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cd2c]"></a>On_MSG_OPTION_AUTOTRACK_ON</STRONG> (ARM, 32 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6ccf0]"></a>On_MSG_OPTION_AUTOTRACK_OFF</STRONG> (ARM, 32 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6ccb4]"></a>On_MSG_OPTION_STRATEGY_ON</STRONG> (ARM, 32 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cc78]"></a>On_MSG_OPTION_STRATEGY_OFF</STRONG> (ARM, 32 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cc3c]"></a>On_MSG_OPTION_HD_ON</STRONG> (ARM, 32 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cc00]"></a>On_MSG_OPTION_HD_OFF</STRONG> (ARM, 32 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cbc4]"></a>On_MSG_OPTION_HD_VAL</STRONG> (ARM, 12 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cb88]"></a>On_MSG_OPTION_SCAMERA_CONTRL</STRONG> (ARM, 12 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cb4c]"></a>On_MSG_OPTION_SCAMERA_VAL</STRONG> (ARM, 12 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cb10]"></a>On_MSG_OPTION_DEBUG</STRONG> (ARM, 88 bytes, Stack size 16 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d14164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NetPort
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6cad4]"></a>On_MSG_OPTION_DEV_RESET</STRONG> (ARM, 12 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6ca98]"></a>On_MSG_OPTION_FILE_REQ</STRONG> (ARM, 128 bytes, Stack size 16 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6c138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Read
<LI><a href="#[d6c228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6ca5c]"></a>On_MSG_OPTION_FILE_SEND</STRONG> (ARM, 156 bytes, Stack size 16 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6c0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_UserProgram_Write
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6c1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6ca20]"></a>On_MSG_OPTION_SERVER_FILE_SEND</STRONG> (ARM, 452 bytes, Stack size 40 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d689ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d6c174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Write_OneDay
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
<LI><a href="#[d6ef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamToFlash
<LI><a href="#[d6ef64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelSector
<LI><a href="#[d6efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIAP
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c9e4]"></a>On_MSG_OPTION_SEVER_ACK</STRONG> (ARM, 152 bytes, Stack size 24 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1210c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_Set
<LI><a href="#[d6c1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read_CurDay
<LI><a href="#[d6d86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Time_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c9a8]"></a>On_MSG_OPTION_STATUS_CHANGE</STRONG> (ARM, 420 bytes, Stack size 104 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_Rec_Find
<LI><a href="#[d10f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DesIp
<LI><a href="#[d11068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Request
<LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[d14128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Compare
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
<LI><a href="#[d6bf94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Rec_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c96c]"></a>On_MSG_OPTION_SVRLINK_REQ</STRONG> (ARM, 104 bytes, Stack size 104 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[d14164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NetPort
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c930]"></a>On_MSG_OPTION_HW_SEND</STRONG> (ARM, 12 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c8f4]"></a>On_MSG_OPTION_TIMEACTIVE</STRONG> (ARM, 424 bytes, Stack size 40 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d12274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_Get
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6c1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read_CurDay
<LI><a href="#[d6c354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Class_Table_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c8b8]"></a>On_MSG_RepeatPower_OPTION</STRONG> (ARM, 432 bytes, Stack size 40 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d1657c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_send
<LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
<LI><a href="#[d6c084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Option_Find
<LI><a href="#[d6c2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Find
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
</UL>

<P><STRONG><a name="[d6c87c]"></a>On_MSG_Power_OPTION</STRONG> (ARM, 416 bytes, Stack size 40 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d1657c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_send
<LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
<LI><a href="#[d6c084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Option_Find
<LI><a href="#[d6c2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Find
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c840]"></a>On_MSG_OPTION</STRONG> (ARM, 208 bytes, Stack size 32 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d1657c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_send
<LI><a href="#[d6c084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Option_Find
<LI><a href="#[d6c2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Find
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
</UL>

<P><STRONG><a name="[d6c804]"></a>ON_Device_select</STRONG> (ARM, 1032 bytes, Stack size 32 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Sound_Select
<LI><a href="#[d12940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Sound_Contrl
<LI><a href="#[d129b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Get_Vol
<LI><a href="#[d12aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_InVol
<LI><a href="#[d12b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUND_DEVICE_Mute
<LI><a href="#[d12bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundVolumeControl
<LI><a href="#[d131b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_VGA_Select
<LI><a href="#[d132a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Video_Select
<LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[d6bfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TB_Select
<LI><a href="#[d6c2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Stat_Option
<LI><a href="#[d6c2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Find
<LI><a href="#[d6c840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c7c8]"></a>Send_State</STRONG> (ARM, 148 bytes, Stack size 96 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DesIp
<LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d164c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Debug
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d6c048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Set
</UL>

<P><STRONG><a name="[d6c78c]"></a>ON_Change_State</STRONG> (ARM, 872 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c750]"></a>On_MSG_OPTION_RECORD</STRONG> (ARM, 180 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c714]"></a>On_MSG_OPTION_METRIC</STRONG> (ARM, 192 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c6d8]"></a>On_MSG_OPTION_FRAME</STRONG> (ARM, 192 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c69c]"></a>On_MSG_OPTION_CODE1_SPEED</STRONG> (ARM, 192 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c660]"></a>On_MSG_OPTION_PERSONAL_TALL</STRONG> (ARM, 180 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c624]"></a>On_MSG_OPTION_SELECT_SCAMERA</STRONG> (ARM, 184 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c5e8]"></a>On_MSG_OPTION_SCAMERA</STRONG> (ARM, 1000 bytes, Stack size 56 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d1198c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xcom_set
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6c2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Find
<LI><a href="#[d6dec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FocusFarCmd
<LI><a href="#[d6defc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FocusNearCmd
<LI><a href="#[d6df74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrepositionCmd
<LI><a href="#[d6dfb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoPrepositionCmd
<LI><a href="#[d6dfec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCmd
<LI><a href="#[d6e028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRightDownCmd
<LI><a href="#[d6e064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRightUpCmd
<LI><a href="#[d6e0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeftDownCmd
<LI><a href="#[d6e0dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeftUpCmd
<LI><a href="#[d6e118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZoomOutCmd
<LI><a href="#[d6e154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZoomInCmd
<LI><a href="#[d6e190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnDownCmd
<LI><a href="#[d6e1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnUpCmd
<LI><a href="#[d6e208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeftCmd
<LI><a href="#[d6e244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRightCmd
<LI><a href="#[d6e2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddress
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c5ac]"></a>On_MSG_OPTION_SOUND_SELECT</STRONG> (ARM, 32 bytes, Stack size 16 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Sound_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c570]"></a>On_MSG_OPTION_SOUND_VOL</STRONG> (ARM, 92 bytes, Stack size 24 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d129f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_OutVol
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c534]"></a>On_MSG_OPTION_VIDEO_SELECT</STRONG> (ARM, 68 bytes, Stack size 16 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d132a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Video_Select
<LI><a href="#[d6bfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TB_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c4f8]"></a>On_MSG_OPTION_VGA_SELECT</STRONG> (ARM, 68 bytes, Stack size 16 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d131b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_VGA_Select
<LI><a href="#[d6bfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TB_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c4bc]"></a>On_MSG_OPTION_ARLM</STRONG> (ARM, 12 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c480]"></a>On_MSG_OPTION_IO_OUT</STRONG> (ARM, 12 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c444]"></a>On_MSG_OPTION_JT</STRONG> (ARM, 12 bytes, Stack size 0 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c408]"></a>On_MSG_OPTION_TEST_IO</STRONG> (ARM, 404 bytes, Stack size 8 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_in
<LI><a href="#[d147f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Out
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c3cc]"></a>On_MSG_OPTION_IO_TEST</STRONG> (ARM, 1032 bytes, Stack size 16 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1396c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d13b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_in
<LI><a href="#[d147f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Out
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6c390]"></a>On_MSG_OPTION_LEDContrl</STRONG> (ARM, 76 bytes, Stack size 16 bytes, user_on_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d139a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6b5bc]"></a>Random</STRONG> (ARM, 92 bytes, Stack size 16 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_ID_Read
</UL>

<P><STRONG><a name="[d6b580]"></a>BinToChar</STRONG> (ARM, 36 bytes, Stack size 0 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6b544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_ID_Read
</UL>

<P><STRONG><a name="[d6b544]"></a>User_ID_Read</STRONG> (ARM, 400 bytes, Stack size 64 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d15514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Write
<LI><a href="#[d15550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Read
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6b580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinToChar
<LI><a href="#[d6b5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
</UL>

<P><STRONG><a name="[d13a5c]"></a>Get_Device_Status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, user_option.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d13ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Scan
<LI><a href="#[d17cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_init
<LI><a href="#[d698e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_MB
<LI><a href="#[d6abe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_msg_rev
<LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
<LI><a href="#[d6b4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Link
<LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6c048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Set
<LI><a href="#[d6c7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_State
<LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
<LI><a href="#[d6c96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SVRLINK_REQ
<LI><a href="#[d6c9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_STATUS_CHANGE
<LI><a href="#[d6d7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_msg_rev
</UL>

<P><STRONG><a name="[d6b508]"></a>ClassInfo_init</STRONG> (ARM, 780 bytes, Stack size 40 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[d14164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NetPort
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d68b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[d6b544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_ID_Read
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
<LI><a href="#[d6eeb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlankCHK
<LI><a href="#[d6eeec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
<LI><a href="#[d6ef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamToFlash
<LI><a href="#[d6ef64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelSector
<LI><a href="#[d6efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIAP
</UL>
<BR>[Called By]<UL><LI><a href="#[d17d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Option_init
</UL>

<P><STRONG><a name="[d17d28]"></a>Option_init</STRONG> (ARM, 96 bytes, Stack size 8 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d68718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d70e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
</UL>

<P><STRONG><a name="[d6c084]"></a>Msg_Option_Find</STRONG> (ARM, 156 bytes, Stack size 24 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION
<LI><a href="#[d6c87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_Power_OPTION
<LI><a href="#[d6c8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_RepeatPower_OPTION
</UL>

<P><STRONG><a name="[d6c2dc]"></a>Device_Rec_Find</STRONG> (ARM, 436 bytes, Stack size 32 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
<LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
<LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
<LI><a href="#[d6c840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION
<LI><a href="#[d6c87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_Power_OPTION
<LI><a href="#[d6c8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_RepeatPower_OPTION
</UL>

<P><STRONG><a name="[d6b4cc]"></a>Alarm_Link</STRONG> (ARM, 412 bytes, Stack size 16 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[d147f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Out
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6bf58]"></a>Task_Run_Delay</STRONG> (ARM, 312 bytes, Stack size 40 bytes, user_option.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Task_Run_Delay &rArr; User_mem_allco &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d6ac98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPowerDeltimemsg
<LI><a href="#[d6acd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraInit
<LI><a href="#[d6b454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraPowerInit
<LI><a href="#[d6c318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Class_Task_Start
<LI><a href="#[d6c87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_Power_OPTION
<LI><a href="#[d6c8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_RepeatPower_OPTION
<LI><a href="#[d6c9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_STATUS_CHANGE
<LI><a href="#[d6d0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_MSG_RUN
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>

<P><STRONG><a name="[d6c318]"></a>Class_Task_Start</STRONG> (ARM, 300 bytes, Stack size 56 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d6d038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASS_OVER
<LI><a href="#[d6d074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASS_BEGIN
</UL>

<P><STRONG><a name="[d6b490]"></a>Device_Rec_Scan</STRONG> (ARM, 944 bytes, Stack size 40 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d11068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Request
<LI><a href="#[d1198c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xcom_set
<LI><a href="#[d129f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_OutVol
<LI><a href="#[d12a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Get_MIX
<LI><a href="#[d12a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Set_MIX
<LI><a href="#[d12aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_InVol
<LI><a href="#[d131b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_VGA_Select
<LI><a href="#[d132a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Video_Select
<LI><a href="#[d14164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NetPort
<LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6b418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Use_Stat_Read
<LI><a href="#[d6c1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read_CurDay
<LI><a href="#[d6d8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Set_Vol
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
</UL>

<P><STRONG><a name="[d11f2c]"></a>Msg_send</STRONG> (ARM, 160 bytes, Stack size 32 bytes, user_option.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = Msg_send &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d70d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[d121c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_IRQ
<LI><a href="#[d17a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[d17c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_UART
<LI><a href="#[d69f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_msg_rev
<LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
<LI><a href="#[d6c354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Class_Table_Check
<LI><a href="#[d6c8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_TIMEACTIVE
<LI><a href="#[d6d0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_MSG_RUN
<LI><a href="#[d6d7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_msg_rev
<LI><a href="#[d6d7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_CMD
</UL>

<P><STRONG><a name="[d0ec14]"></a>Task_Rec_Del</STRONG> (ARM, 244 bytes, Stack size 32 bytes, user_option.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Task_Rec_Del &rArr; User_mem_free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d0edb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_Exception
<LI><a href="#[d698e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_MB
<LI><a href="#[d69f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_msg_rev
<LI><a href="#[d6ac5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelPowerDeltimemsg
<LI><a href="#[d6d0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_MSG_RUN
</UL>

<P><STRONG><a name="[d6bf94]"></a>Task_Rec_Find</STRONG> (ARM, 140 bytes, Stack size 12 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6c9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_STATUS_CHANGE
<LI><a href="#[d6d0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_MSG_RUN
</UL>

<P><STRONG><a name="[d6b454]"></a>CameraPowerInit</STRONG> (ARM, 80 bytes, Stack size 24 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d164c8]"></a>Get_Debug</STRONG> (ARM, 36 bytes, Stack size 0 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d165b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_XM_start
<LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
<LI><a href="#[d6ac20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PC_Power
<LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6c048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Set
<LI><a href="#[d6c7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_State
</UL>

<P><STRONG><a name="[d17b84]"></a>User_Option</STRONG> (ARM, 3288 bytes, Stack size 64 bytes, user_option.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DesIp
<LI><a href="#[d11068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Request
<LI><a href="#[d11a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS752_Scan
<LI><a href="#[d11af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_writeData
<LI><a href="#[d11f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_MSG_OPTION_ALM_TIME
<LI><a href="#[d11fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASSTABLE_ON
<LI><a href="#[d1201c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASSTABLE_OFF
<LI><a href="#[d12148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassTableWeekInit
<LI><a href="#[d12184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_init
<LI><a href="#[d129f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_OutVol
<LI><a href="#[d130fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Link_Scan
<LI><a href="#[d139a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d13ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Scan
<LI><a href="#[d14164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NetPort
<LI><a href="#[d141a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_init
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d164c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Debug
<LI><a href="#[d165b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_XM_start
<LI><a href="#[d165f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HW_END
<LI><a href="#[d16f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6b3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_COMM
<LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
<LI><a href="#[d6b454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraPowerInit
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6b4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Link
<LI><a href="#[d6b544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_ID_Read
<LI><a href="#[d6c390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_LEDContrl
<LI><a href="#[d6c3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_IO_TEST
<LI><a href="#[d6c408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_TEST_IO
<LI><a href="#[d6c444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_JT
<LI><a href="#[d6c480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_IO_OUT
<LI><a href="#[d6c4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_ARLM
<LI><a href="#[d6c4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_VGA_SELECT
<LI><a href="#[d6c534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_VIDEO_SELECT
<LI><a href="#[d6c570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SOUND_VOL
<LI><a href="#[d6c5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SOUND_SELECT
<LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
<LI><a href="#[d6c624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SELECT_SCAMERA
<LI><a href="#[d6c660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_PERSONAL_TALL
<LI><a href="#[d6c69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CODE1_SPEED
<LI><a href="#[d6c6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_FRAME
<LI><a href="#[d6c714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_METRIC
<LI><a href="#[d6c750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_RECORD
<LI><a href="#[d6c78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Change_State
<LI><a href="#[d6c7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_State
<LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
<LI><a href="#[d6c840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION
<LI><a href="#[d6c87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_Power_OPTION
<LI><a href="#[d6c8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_RepeatPower_OPTION
<LI><a href="#[d6c8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_TIMEACTIVE
<LI><a href="#[d6c930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HW_SEND
<LI><a href="#[d6c96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SVRLINK_REQ
<LI><a href="#[d6c9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_STATUS_CHANGE
<LI><a href="#[d6c9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SEVER_ACK
<LI><a href="#[d6ca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SERVER_FILE_SEND
<LI><a href="#[d6ca5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_FILE_SEND
<LI><a href="#[d6ca98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_FILE_REQ
<LI><a href="#[d6cad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_DEV_RESET
<LI><a href="#[d6cb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_DEBUG
<LI><a href="#[d6cb4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA_VAL
<LI><a href="#[d6cb88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA_CONTRL
<LI><a href="#[d6cbc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HD_VAL
<LI><a href="#[d6cc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HD_OFF
<LI><a href="#[d6cc3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HD_ON
<LI><a href="#[d6cc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_STRATEGY_OFF
<LI><a href="#[d6ccb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_STRATEGY_ON
<LI><a href="#[d6ccf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_AUTOTRACK_OFF
<LI><a href="#[d6cd2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_AUTOTRACK_ON
<LI><a href="#[d6cd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_REC_REMOTE_OFF
<LI><a href="#[d6cda4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_DEV_REMOTE_OFF
<LI><a href="#[d6cde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_REC_REMOTE_ON
<LI><a href="#[d6ce1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_DEV_REMOTE_ON
<LI><a href="#[d6ce58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_AUTO_OFF
<LI><a href="#[d6ce94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_AUTO_ON
<LI><a href="#[d6ced0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_BREAK
<LI><a href="#[d6cf0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_LINK
<LI><a href="#[d6cf48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_TEST
<LI><a href="#[d6cf84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_OFF
<LI><a href="#[d6cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_ON
<LI><a href="#[d6cffc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_RF_ACTIVE
<LI><a href="#[d6d038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASS_OVER
<LI><a href="#[d6d074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASS_BEGIN
<LI><a href="#[d6d0b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWER
<LI><a href="#[d6d0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_MSG_RUN
<LI><a href="#[d6d128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Sound_Mute
<LI><a href="#[d6d7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_msg_rev
<LI><a href="#[d6d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Contrl
<LI><a href="#[d6d8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Set_Vol
<LI><a href="#[d70da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>
<BR>[Called By]<UL><LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
</UL>

<P><STRONG><a name="[d6ad10]"></a>Power_Beep</STRONG> (ARM, 4 bytes, Stack size 0 bytes, user_power.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d17cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_init
</UL>

<P><STRONG><a name="[d17cec]"></a>POWER_init</STRONG> (ARM, 156 bytes, Stack size 32 bytes, user_power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[d147f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Out
<LI><a href="#[d17bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
<LI><a href="#[d6ad10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Beep
<LI><a href="#[d6d77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
</UL>

<P><STRONG><a name="[d6acd4]"></a>CameraInit</STRONG> (ARM, 148 bytes, Stack size 40 bytes, user_power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
</UL>

<P><STRONG><a name="[d6c048]"></a>POWER_Set</STRONG> (ARM, 452 bytes, Stack size 64 bytes, user_power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[d164c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Debug
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d6c7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_State
<LI><a href="#[d6d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_IRQ_Recive_Open
<LI><a href="#[d6d704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_IRQ_Read
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
<LI><a href="#[d6d0b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWER
</UL>

<P><STRONG><a name="[d6ac98]"></a>SetPowerDeltimemsg</STRONG> (ARM, 96 bytes, Stack size 40 bytes, user_power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
</UL>

<P><STRONG><a name="[d6ac5c]"></a>DelPowerDeltimemsg</STRONG> (ARM, 60 bytes, Stack size 24 bytes, user_power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0ec14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Rec_Del
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
</UL>

<P><STRONG><a name="[d6ac20]"></a>IO_PC_Power</STRONG> (ARM, 152 bytes, Stack size 16 bytes, user_power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1396c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d147f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Out
<LI><a href="#[d164c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Debug
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
</UL>

<P><STRONG><a name="[d6b3dc]"></a>ON_POWER_option</STRONG> (ARM, 2716 bytes, Stack size 64 bytes, user_power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d139a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d13a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_TB_state
<LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[d13a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_DCS_open
<LI><a href="#[d13b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Contrl
<LI><a href="#[d13b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_in
<LI><a href="#[d6ac20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PC_Power
<LI><a href="#[d6ac5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelPowerDeltimemsg
<LI><a href="#[d6ac98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPowerDeltimemsg
<LI><a href="#[d6acd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraInit
<LI><a href="#[d6c048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Set
<LI><a href="#[d6c2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Stat_Option
<LI><a href="#[d6c2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Find
<LI><a href="#[d6d920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_KeyData
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6b364]"></a>On_MSG_OPTION_POWERCARD_ONOFF</STRONG> (ARM, 1720 bytes, Stack size 48 bytes, user_power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d139a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d13a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_TB_state
<LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[d13b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_in
<LI><a href="#[d164c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Debug
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d6ac20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PC_Power
<LI><a href="#[d6ac5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelPowerDeltimemsg
<LI><a href="#[d6bf94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Rec_Find
<LI><a href="#[d6c048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Set
<LI><a href="#[d6c2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Stat_Option
<LI><a href="#[d6c2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Find
<LI><a href="#[d6c8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_RepeatPower_OPTION
<LI><a href="#[d6d920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_KeyData
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6abe4]"></a>POWER_msg_rev</STRONG> (ARM, 64 bytes, Stack size 16 bytes, user_power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_msg_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[d698e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_MB
</UL>

<P><STRONG><a name="[d6a860]"></a>File_Req</STRONG> (ARM, 156 bytes, Stack size 32 bytes, user_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6c1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Write
</UL>

<P><STRONG><a name="[d6c0fc]"></a>File_Table_Write</STRONG> (ARM, 640 bytes, Stack size 168 bytes, user_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d15514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Write
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d680c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[d683d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6a860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Req
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6b544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_ID_Read
<LI><a href="#[d6eeb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlankCHK
<LI><a href="#[d6eeec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
<LI><a href="#[d6ef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamToFlash
<LI><a href="#[d6ef64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelSector
<LI><a href="#[d6efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIAP
</UL>
<BR>[Called By]<UL><LI><a href="#[d6ca5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_FILE_SEND
</UL>

<P><STRONG><a name="[d6c138]"></a>File_Table_Read</STRONG> (ARM, 428 bytes, Stack size 40 bytes, user_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d15550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Read
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d680c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d6ca98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_FILE_REQ
</UL>

<P><STRONG><a name="[d6c1ec]"></a>File_ClassTable_Read_CurDay</STRONG> (ARM, 336 bytes, Stack size 24 bytes, user_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_Get
<LI><a href="#[d15550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Read
<LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
<LI><a href="#[d68718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6c174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Write_OneDay
<LI><a href="#[d6c1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Write
<LI><a href="#[d6c8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_TIMEACTIVE
<LI><a href="#[d6c9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SEVER_ACK
</UL>

<P><STRONG><a name="[d6c1b0]"></a>File_ClassTable_Write</STRONG> (ARM, 108 bytes, Stack size 16 bytes, user_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d15514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Write
<LI><a href="#[d6a860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Req
<LI><a href="#[d6c1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read_CurDay
</UL>
<BR>[Called By]<UL><LI><a href="#[d6ca5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_FILE_SEND
</UL>

<P><STRONG><a name="[d6c174]"></a>File_ClassTable_Write_OneDay</STRONG> (ARM, 52 bytes, Stack size 16 bytes, user_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d15514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Write
<LI><a href="#[d6c1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read_CurDay
</UL>
<BR>[Called By]<UL><LI><a href="#[d6ca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SERVER_FILE_SEND
</UL>

<P><STRONG><a name="[d6c228]"></a>File_ClassTable_Read</STRONG> (ARM, 164 bytes, Stack size 16 bytes, user_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d15550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Read
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[d6ca98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_FILE_REQ
</UL>

<P><STRONG><a name="[d6c354]"></a>Class_Table_Check</STRONG> (ARM, 320 bytes, Stack size 40 bytes, user_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d12274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_TIMEACTIVE
</UL>

<P><STRONG><a name="[d6c2a0]"></a>Device_Stat_Option</STRONG> (ARM, 296 bytes, Stack size 24 bytes, user_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d12238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_Get_Minute
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_POWERCARD_ONOFF
<LI><a href="#[d6b3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_POWER_option
<LI><a href="#[d6c264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Stat_Save
<LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
</UL>

<P><STRONG><a name="[d6c264]"></a>Device_Stat_Save</STRONG> (ARM, 184 bytes, Stack size 16 bytes, user_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d15514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Write
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d68718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d6c2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Stat_Option
</UL>
<BR>[Called By]<UL><LI><a href="#[d6d038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_CLASS_OVER
</UL>

<P><STRONG><a name="[d6b418]"></a>Device_Use_Stat_Read</STRONG> (ARM, 380 bytes, Stack size 32 bytes, user_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d15550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Read
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d17ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_FlagLingt_Flash
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassInfo_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
</UL>

<P><STRONG><a name="[d6c0c0]"></a>File_UserProgram_Write</STRONG> (ARM, 92 bytes, Stack size 32 bytes, user_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d16e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_BootLoader
<LI><a href="#[d17bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6ca5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_FILE_SEND
</UL>

<P><STRONG><a name="[d6bfd0]"></a>TB_Select</STRONG> (ARM, 488 bytes, Stack size 32 bytes, user_tb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d131b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_VGA_Select
<LI><a href="#[d132a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Video_Select
<LI><a href="#[d1396c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d6c4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_VGA_SELECT
<LI><a href="#[d6c534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_VIDEO_SELECT
<LI><a href="#[d6c804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_Device_select
</UL>

<P><STRONG><a name="[d6a3ec]"></a>TB_set</STRONG> (ARM, 60 bytes, Stack size 24 bytes, user_tb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>

<P><STRONG><a name="[d6a3b0]"></a>TB_msg_rev</STRONG> (ARM, 4 bytes, Stack size 0 bytes, user_tb.o(.text), UNUSED)

<P><STRONG><a name="[d0f3d0]"></a>LAN_Test_Ack</STRONG> (ARM, 76 bytes, Stack size 32 bytes, user_udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d140ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udp_SendPacked
<LI><a href="#[d14128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Compare
</UL>
<BR>[Called By]<UL><LI><a href="#[d0fc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ReceivePacket
</UL>

<P><STRONG><a name="[d16414]"></a>UDP_Send_CMD</STRONG> (ARM, 524 bytes, Stack size 144 bytes, user_udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d10f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DesIp
<LI><a href="#[d10fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPByte_TO_Dword
<LI><a href="#[d1102c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassID
<LI><a href="#[d140ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udp_SendPacked
<LI><a href="#[d14128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Compare
<LI><a href="#[d14164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NetPort
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d68718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d69ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_XCOM_Port
<LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d165b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_XM_start
<LI><a href="#[d6a860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Req
<LI><a href="#[d6c138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Read
<LI><a href="#[d6c228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read
<LI><a href="#[d6c7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_State
<LI><a href="#[d6c96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SVRLINK_REQ
<LI><a href="#[d6c9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_STATUS_CHANGE
<LI><a href="#[d6ca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SERVER_FILE_SEND
<LI><a href="#[d6ced0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_BREAK
<LI><a href="#[d6cf84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_OFF
<LI><a href="#[d6cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_ON
</UL>

<P><STRONG><a name="[d69f3c]"></a>UDP_Send_ACK</STRONG> (ARM, 216 bytes, Stack size 80 bytes, user_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = UDP_Send_ACK &rArr; Udp_SendPacked &rArr; IP_SendFrame &rArr; Arp_Request &rArr; Ethernet_SendFrame &rArr; Send_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[d10f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DesIp
<LI><a href="#[d10fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPByte_TO_Dword
<LI><a href="#[d10ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDword_TO_Byte
<LI><a href="#[d1102c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ClassID
<LI><a href="#[d115cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAPIBlockEnter
<LI><a href="#[d140ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udp_SendPacked
<LI><a href="#[d68718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d69ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_XCOM_Port
<LI><a href="#[d71250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>
<BR>[Called By]<UL><LI><a href="#[d69f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_msg_rev
</UL>

<P><STRONG><a name="[d69f00]"></a>UDP_msg_rev</STRONG> (ARM, 244 bytes, Stack size 88 bytes, user_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = UDP_msg_rev &rArr; UDP_Send_ACK &rArr; Udp_SendPacked &rArr; IP_SendFrame &rArr; Arp_Request &rArr; Ethernet_SendFrame &rArr; Send_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[d0ec14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Rec_Del
<LI><a href="#[d10ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPDword_TO_Byte
<LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d14164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NetPort
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d69f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[d17c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_UART
</UL>

<P><STRONG><a name="[d69ec4]"></a>Get_XCOM_Port</STRONG> (ARM, 16 bytes, Stack size 0 bytes, user_xcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d69f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_ACK
</UL>

<P><STRONG><a name="[d6d6c8]"></a>XCOM_IRQ_Recive_Open</STRONG> (ARM, 64 bytes, Stack size 4 bytes, user_xcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = XCOM_IRQ_Recive_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d6c048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Set
<LI><a href="#[d6d77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_Read
<LI><a href="#[d6d86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Time_Flash
<LI><a href="#[d6d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Contrl
<LI><a href="#[d6d8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Set_Vol
</UL>

<P><STRONG><a name="[d6d704]"></a>XCOM_IRQ_Read</STRONG> (ARM, 120 bytes, Stack size 16 bytes, user_xcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = XCOM_IRQ_Read &rArr; OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d71bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>
<BR>[Called By]<UL><LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d6c048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Set
<LI><a href="#[d6d77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_Read
<LI><a href="#[d6d86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Time_Flash
<LI><a href="#[d6d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Contrl
<LI><a href="#[d6d8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Set_Vol
</UL>

<P><STRONG><a name="[d699d8]"></a>Xcom_sum</STRONG> (ARM, 64 bytes, Stack size 0 bytes, user_xcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6999c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Send_ACK
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>

<P><STRONG><a name="[d6b3a0]"></a>On_MSG_OPTION_COMM</STRONG> (ARM, 196 bytes, Stack size 32 bytes, user_xcom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d115cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAPIBlockEnter
<LI><a href="#[d140ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udp_SendPacked
<LI><a href="#[d71250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>
<BR>[Called By]<UL><LI><a href="#[d17b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Option
</UL>

<P><STRONG><a name="[d6d740]"></a>XCOM_Data_send</STRONG> (ARM, 460 bytes, Stack size 72 bytes, user_xcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = XCOM_Data_send &rArr; Task_Run_Delay &rArr; User_mem_allco &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d115cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAPIBlockEnter
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d699d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xcom_sum
<LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
<LI><a href="#[d71250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>
<BR>[Called By]<UL><LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d6a3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TB_set
<LI><a href="#[d6bfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TB_Select
<LI><a href="#[d6c048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Set
<LI><a href="#[d6d77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_Read
<LI><a href="#[d6d86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Time_Flash
<LI><a href="#[d6d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Contrl
<LI><a href="#[d6d8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Set_Vol
</UL>

<P><STRONG><a name="[d6d77c]"></a>XCOM_Data_Read</STRONG> (ARM, 116 bytes, Stack size 56 bytes, user_xcom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_IRQ_Recive_Open
<LI><a href="#[d6d704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_IRQ_Read
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d17a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[d17cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_init
</UL>

<P><STRONG><a name="[d1198c]"></a>Xcom_set</STRONG> (ARM, 124 bytes, Stack size 24 bytes, user_xcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Xcom_set &rArr; UART_set_bps &rArr; set_IS752_bps &rArr; SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d0eea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_set_bps
</UL>
<BR>[Called By]<UL><LI><a href="#[d11a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS752_Scan
<LI><a href="#[d17ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_init
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
</UL>

<P><STRONG><a name="[d17ad0]"></a>XCOM_init</STRONG> (ARM, 304 bytes, Stack size 8 bytes, user_xcom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0ec8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
<LI><a href="#[d11608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAPIBlockNew
<LI><a href="#[d1198c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xcom_set
<LI><a href="#[d70e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[d71250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[d71c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[d17fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_START
</UL>

<P><STRONG><a name="[d6999c]"></a>XCOM_Send_ACK</STRONG> (ARM, 160 bytes, Stack size 40 bytes, user_xcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = XCOM_Send_ACK &rArr; OSAPIBlockEnter &rArr; OSMutexPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d115cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAPIBlockEnter
<LI><a href="#[d699d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xcom_sum
<LI><a href="#[d71250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>
<BR>[Called By]<UL><LI><a href="#[d17c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_UART
<LI><a href="#[d698e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_MB
<LI><a href="#[d69924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_TB
<LI><a href="#[d69960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_DW
</UL>

<P><STRONG><a name="[d69960]"></a>XCOM_DW</STRONG> (ARM, 24 bytes, Stack size 8 bytes, user_xcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = XCOM_DW &rArr; XCOM_Send_ACK &rArr; OSAPIBlockEnter &rArr; OSMutexPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d6999c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Send_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[d17c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_UART
</UL>

<P><STRONG><a name="[d69924]"></a>XCOM_TB</STRONG> (ARM, 24 bytes, Stack size 8 bytes, user_xcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = XCOM_TB &rArr; XCOM_Send_ACK &rArr; OSAPIBlockEnter &rArr; OSMutexPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d6999c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Send_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[d17c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_UART
</UL>

<P><STRONG><a name="[d698e8]"></a>XCOM_MB</STRONG> (ARM, 196 bytes, Stack size 40 bytes, user_xcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = XCOM_MB &rArr; key_msg_rev &rArr; KEY_CMD &rArr; IP_printf &rArr; Udp_SendPacked &rArr; IP_SendFrame &rArr; Arp_Request &rArr; Ethernet_SendFrame &rArr; Send_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[d0ec14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Rec_Del
<LI><a href="#[d13a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Device_Status
<LI><a href="#[d6999c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Send_ACK
<LI><a href="#[d6abe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_msg_rev
<LI><a href="#[d6d7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_msg_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[d17c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_UART
</UL>

<P><STRONG><a name="[d698ac]"></a>XCOM_SCAMERA</STRONG> (ARM, 4 bytes, Stack size 0 bytes, user_xcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d17c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_UART
</UL>

<P><STRONG><a name="[d0f394]"></a>XCOM_Q_Send</STRONG> (ARM, 160 bytes, Stack size 32 bytes, user_xcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = XCOM_Q_Send &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d16450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d1648c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d68880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d70d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[d0ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Exception
<LI><a href="#[d0ed04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Exception
<LI><a href="#[d0ed40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Exception
<LI><a href="#[d0ed7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Exception
<LI><a href="#[d0edb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_Exception
<LI><a href="#[d0fc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ReceivePacket
</UL>

<P><STRONG><a name="[d17c74]"></a>TASK_UART</STRONG> (ARM, 276 bytes, Stack size 32 bytes, user_xcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = TASK_UART &rArr; UDP_msg_rev &rArr; UDP_Send_ACK &rArr; Udp_SendPacked &rArr; IP_SendFrame &rArr; Arp_Request &rArr; Ethernet_SendFrame &rArr; Send_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d17bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d698ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_SCAMERA
<LI><a href="#[d698e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_MB
<LI><a href="#[d69924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_TB
<LI><a href="#[d69960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_DW
<LI><a href="#[d6999c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Send_ACK
<LI><a href="#[d69f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_msg_rev
<LI><a href="#[d70da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[d69618]"></a>__c89vsprintf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d66864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d66990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d17bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf (via Veneer)
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf (via Veneer)
<LI><a href="#[d6f540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Change (via Veneer)
</UL>

<P><STRONG><a name="[d68b8c]"></a>strcpy</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, strcpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init (via Veneer)
</UL>

<P><STRONG><a name="[d68a9c]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d17bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf (via Veneer)
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf (via Veneer)
</UL>

<P><STRONG><a name="[d689ac]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d686a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d6ca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SERVER_FILE_SEND
<LI><a href="#[d6ed84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Flash
</UL>

<P><STRONG><a name="[d68880]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Exception
<LI><a href="#[d0ed04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Exception
<LI><a href="#[d0ed40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Exception
<LI><a href="#[d0ed7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Exception
<LI><a href="#[d0edb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_Exception
<LI><a href="#[d0f394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Q_Send
<LI><a href="#[d0fc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ReceivePacket
<LI><a href="#[d0fc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_ReceivePacket
<LI><a href="#[d10870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Packet
<LI><a href="#[d10ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Debug_init
<LI><a href="#[d10ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendFrame
<LI><a href="#[d10ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_Rec_Save
<LI><a href="#[d11068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Request
<LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d12184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTime_init
<LI><a href="#[d121fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtime_IRQFlag
<LI><a href="#[d139e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SendFLASH
<LI><a href="#[d14218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Save_PlayData
<LI><a href="#[d142cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Open
<LI><a href="#[d150a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Input_Int
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d69f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_msg_rev
<LI><a href="#[d69f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_ACK
<LI><a href="#[d6b418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Use_Stat_Read
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6b544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_ID_Read
<LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
<LI><a href="#[d6c0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_UserProgram_Write
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6c138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Read
<LI><a href="#[d6c318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Class_Task_Start
<LI><a href="#[d6c5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SCAMERA
<LI><a href="#[d6c7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_State
<LI><a href="#[d6c8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_TIMEACTIVE
<LI><a href="#[d6c96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SVRLINK_REQ
<LI><a href="#[d6c9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_STATUS_CHANGE
<LI><a href="#[d6ca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SERVER_FILE_SEND
<LI><a href="#[d6ced0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_BREAK
<LI><a href="#[d6cf84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_OFF
<LI><a href="#[d6cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_ON
<LI><a href="#[d6d0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_MSG_RUN
<LI><a href="#[d6d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Data_send
<LI><a href="#[d6d86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Time_Flash
<LI><a href="#[d6dec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FocusFarCmd
<LI><a href="#[d6defc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FocusNearCmd
<LI><a href="#[d6df38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPrepositionCmd
<LI><a href="#[d6df74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrepositionCmd
<LI><a href="#[d6dfb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoPrepositionCmd
<LI><a href="#[d6dfec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCmd
<LI><a href="#[d6e028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRightDownCmd
<LI><a href="#[d6e064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRightUpCmd
<LI><a href="#[d6e0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeftDownCmd
<LI><a href="#[d6e0dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeftUpCmd
<LI><a href="#[d6e118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZoomOutCmd
<LI><a href="#[d6e154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZoomInCmd
<LI><a href="#[d6e190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnDownCmd
<LI><a href="#[d6e1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnUpCmd
<LI><a href="#[d6e208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeftCmd
<LI><a href="#[d6e244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRightCmd
<LI><a href="#[d6ed84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Flash
</UL>

<P><STRONG><a name="[d68844]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d68574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[d68808]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[d68718]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d11068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Request
<LI><a href="#[d141a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_init
<LI><a href="#[d16414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_CMD
<LI><a href="#[d17d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Option_init
<LI><a href="#[d17e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_printf
<LI><a href="#[d69f3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Send_ACK
<LI><a href="#[d6c1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_ClassTable_Read_CurDay
<LI><a href="#[d6c264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Stat_Save
</UL>

<P><STRONG><a name="[d686dc]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6831c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[d686a0]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d689ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d68574]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0f790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ping_Precess
<LI><a href="#[d0fc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_ReceivePacket
<LI><a href="#[d11068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Request
<LI><a href="#[d68844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[d68538]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[d684fc]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[d684c0]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[d683d0]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0edb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_Exception
<LI><a href="#[d0fc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_SendFrame
<LI><a href="#[d11068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arp_Request
<LI><a href="#[d140ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udp_SendPacked
<LI><a href="#[d150dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[d17bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
<LI><a href="#[d17d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Option_init
<LI><a href="#[d17f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_init
<LI><a href="#[d6acd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraInit
<LI><a href="#[d6b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Rec_Scan
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6c7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_State
<LI><a href="#[d6ced0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_BREAK
<LI><a href="#[d6cf84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_OFF
<LI><a href="#[d6cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_HELP_ON
</UL>

<P><STRONG><a name="[d68394]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d68358]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d6831c]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d686dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[d68100]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[d680c4]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d115cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSAPIBlockEnter
<LI><a href="#[d12bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundVolumeControl
<LI><a href="#[d141dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Pointer_Scan
<LI><a href="#[d14218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Save_PlayData
<LI><a href="#[d1486c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_Set_Vol
<LI><a href="#[d15064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Play_Int
<LI><a href="#[d1657c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_send
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6c138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Read
<LI><a href="#[169cea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
</UL>

<P><STRONG><a name="[d66fa8]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d66648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[d66684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d66d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[169d044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[169e1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[169e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[d66f6c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d66648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[d66684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d66d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[169d044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[169e1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[169e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[d66e7c]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d66c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d66e40]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d660a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[d66c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[16a0bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[d66d50]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d66648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[d66f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d66fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[169dc38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d66c24]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d66e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[d66e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[169d65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[169e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[169fb64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[169fc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
<LI><a href="#[169fccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
</UL>

<P><STRONG><a name="[d66abc]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a0050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n (via Veneer)
</UL>

<P><STRONG><a name="[d66990]"></a>_printf_char_common</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16a02e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d69618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[d66864]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d69618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[d66684]"></a>_printf_wctomb</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d66648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[d66f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d66fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[169d7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[169da94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[d664e0]"></a>_printf_longlong_dec</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[169e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[169e430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[169f54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu (via Veneer)
<LI><a href="#[169f600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld (via Veneer)
<LI><a href="#[169f6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli (via Veneer)
</UL>

<P><STRONG><a name="[d660e4]"></a>_printf_longlong_oct</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[169e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d6606c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[d660a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[d660a8]"></a>_printf_int_oct</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d660e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[d66e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[169fdbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[d6606c]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d660e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[169f150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo (via Veneer)
</UL>

<P><STRONG><a name="[16a0c08]"></a>_printf_longlong_hex</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[169e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16a0b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[16a0b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[16a0bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[16a0bcc]"></a>_printf_int_hex</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d66e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[16a0c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[169ff9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[16a0b90]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16a0c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[169f060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx (via Veneer)
</UL>

<P><STRONG><a name="[16a0b54]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16a0c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[169feac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p (via Veneer)
</UL>

<P><STRONG><a name="[16a02e4]"></a>__printf</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d66648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[d670d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
<LI><a href="#[169f7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d66990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[169e430]"></a>_ll_udiv10</STRONG> (ARM, 160 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d664e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
<LI><a href="#[169e250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[169e340]"></a>_printf_int_common</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d66648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[d66f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d66fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d660e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[d664e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[d66c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[16a0c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[169e214]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[169e1d8]"></a>_printf_fp_dec_real</STRONG> (Thumb, 616 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d66648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[d66f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d66fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[169b4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify (via Veneer)
<LI><a href="#[169d044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[169d170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
<LI><a href="#[169d65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[169e250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[169ee08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (via Veneer)
</UL>

<P><STRONG><a name="[169dc38]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d66d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[169db84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[169dbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[169dbfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[169dbfc]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[169dc38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16a0230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[169dbc0]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[169dc38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16a0140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[169da94]"></a>_printf_lcs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d66684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[169d9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[169da1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[169da58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[169da58]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[169da94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[169f330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[169da1c]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[169da94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[169f240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls (via Veneer)
</UL>

<P><STRONG><a name="[169d7c4]"></a>_wcrtomb</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[169d404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
<LI><a href="#[169d788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[d66684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[169d65c]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d66c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
<LI><a href="#[169e1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[169d404]"></a>__rt_ctype_table</STRONG> (ARM, 24 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[169d170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[169d7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via Veneer)
</UL>

<P><STRONG><a name="[169d170]"></a>__rt_locale</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1699cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common (via Veneer)
<LI><a href="#[169d404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[169e1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[169d044]"></a>_printf_fp_infnan</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d66648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[d66f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d66fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[169e1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[169cea0]"></a>_btod_etento</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d680c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[169c720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[169c798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[169e250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[169c2ac]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[169b064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[169c234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[169e9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[169a8e4]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[169ac68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[169c414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1698bd4]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169888c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1698ae4]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[1698aa8]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d68088]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[d6804c]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[d6813c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[d68178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[d681b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[d0eea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_set_bps
<LI><a href="#[d11a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IS752_bps
<LI><a href="#[d150dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[d15190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Get_Play_Pointer
<LI><a href="#[d16a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Debug_init
<LI><a href="#[d16bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1Init
<LI><a href="#[d16c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c0Init
<LI><a href="#[d16dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
<LI><a href="#[d6fe64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[d72aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[169c900]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[169c888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[169e250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[169c8c4]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[169c888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[169c888]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[169c8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[169c900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[169c84c]"></a>__btod_div_common</STRONG> (ARM, 716 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[169c798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[169c7d4]"></a>_e2e</STRONG> (ARM, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[169c720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[169c798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[169c798]"></a>_btod_ediv</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[169c7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[169c84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[169cea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
<LI><a href="#[169e250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[169c720]"></a>_btod_emul</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[169c6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[169c7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[169cea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
<LI><a href="#[169e250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[169c6a8]"></a>__btod_mult_common</STRONG> (ARM, 616 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[169c720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[d16450]"></a>OS_CPU_SR_Save</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[d0e890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d0ec14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Rec_Del
<LI><a href="#[d0ec50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d0f394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Q_Send
<LI><a href="#[d10ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendFrame
<LI><a href="#[d11554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[d11590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[d11af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_writeData
<LI><a href="#[d11b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_write
<LI><a href="#[d11b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_read
<LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
<LI><a href="#[d1396c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d148a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_Reg_Write
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d1657c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_send
<LI><a href="#[d165b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_XM_start
<LI><a href="#[d16b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[d17d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
<LI><a href="#[d6c0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_UserProgram_Write
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6c8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_TIMEACTIVE
<LI><a href="#[d6ca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SERVER_FILE_SEND
<LI><a href="#[d6fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[d6fdec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[d6fe28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[d701e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[d70224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d70260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[d7029c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[d702d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[d70314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[d7038c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d703c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[d70c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[d70cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[d70cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[d70d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[d70d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[d70da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[d70ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[d70e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[d70e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[d70e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[d71214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexQuery
<LI><a href="#[d71250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[d7128c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[d712c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexAccept
<LI><a href="#[d71688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[d716c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[d71700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[d7173c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[d71778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[d717b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[d71b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxQuery
<LI><a href="#[d71b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[d71bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[d71bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[d71c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[d71c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[d71ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[d72024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[d72060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[d7209c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[d720d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[d72114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[d72150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[d7218c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[d72204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[d72240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[d726f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[d7272c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d72768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[d72948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[d72984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[d729fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[d72ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[d72aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[d72b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[d72bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[d1648c]"></a>OS_CPU_SR_Restore</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[d0e890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d0ec14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Rec_Del
<LI><a href="#[d0ec50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[d0edf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[d0f394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCOM_Q_Send
<LI><a href="#[d10ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_SendFrame
<LI><a href="#[d11554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[d11590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[d11af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_writeData
<LI><a href="#[d11b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_write
<LI><a href="#[d11b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_read
<LI><a href="#[d11f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_send
<LI><a href="#[d13048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSendData
<LI><a href="#[d1396c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d148a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMS320AIC23_Reg_Write
<LI><a href="#[d1639c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_free
<LI><a href="#[d163d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_mem_allco
<LI><a href="#[d1657c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_send
<LI><a href="#[d165b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_XM_start
<LI><a href="#[d16b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[d17d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d6b508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassInfo_init
<LI><a href="#[d6bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Run_Delay
<LI><a href="#[d6c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Table_Write
<LI><a href="#[d6c8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_TIMEACTIVE
<LI><a href="#[d6ca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_MSG_OPTION_SERVER_FILE_SEND
<LI><a href="#[d6fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[d6fdec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[d6fe28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[d701e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[d70224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d70260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[d7029c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[d702d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[d70314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[d7038c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d703c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[d70c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[d70cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[d70cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[d70d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[d70d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[d70da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[d70ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[d70e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[d70e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[d70e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[d71214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexQuery
<LI><a href="#[d71250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[d7128c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[d712c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexAccept
<LI><a href="#[d71688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[d716c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[d71700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[d7173c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[d71778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[d717b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[d71b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxQuery
<LI><a href="#[d71b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[d71bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[d71bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[d71c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[d71c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[d71ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[d72024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[d72060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[d7209c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[d720d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[d72114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[d72150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[d7218c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[d72204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[d72240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[d726f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[d7272c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d72768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[d72948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[d72984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[d729fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[d72ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[d72aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[d72b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[d72bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[d0e9bc]"></a>OSStartHighRdy</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[d17da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[d0e980]"></a>OSCtxSw</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d0e944]"></a>OSIntCtxSw</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[d0e890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[d0e908]"></a>OS_CPU_ARM_ExceptResetHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE), UNUSED)

<P><STRONG><a name="[d177c4]"></a>OS_CPU_ARM_ExceptUndefInstrHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_c.o(.text)
<LI> vectors.o(VECT)
</UL>
<P><STRONG><a name="[d17800]"></a>OS_CPU_ARM_ExceptSwiHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_c.o(.text)
<LI> vectors.o(VECT)
</UL>
<P><STRONG><a name="[d1783c]"></a>OS_CPU_ARM_ExceptPrefetchAbortHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_c.o(.text)
<LI> vectors.o(VECT)
</UL>
<P><STRONG><a name="[d178f0]"></a>OS_CPU_ARM_ExceptDataAbortHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_c.o(.text)
<LI> vectors.o(VECT)
</UL>
<P><STRONG><a name="[d0e8cc]"></a>OS_CPU_ARM_ExceptAddrAbortHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.text)
</UL>
<P><STRONG><a name="[d17878]"></a>OS_CPU_ARM_ExceptIrqHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_c.o(.text)
<LI> vectors.o(VECT)
</UL>
<P><STRONG><a name="[d178b4]"></a>OS_CPU_ARM_ExceptFiqHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_c.o(.text)
<LI> vectors.o(VECT)
</UL>
<P><STRONG><a name="[d17788]"></a>ResetHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(INIT))

<P><STRONG><a name="[d16cc0]"></a>CPU_SR_Save</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cpu_a.o(_CPU_A_CODE_))
<BR><BR>[Called By]<UL><LI><a href="#[d1729c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
</UL>

<P><STRONG><a name="[d16cfc]"></a>CPU_SR_Restore</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cpu_a.o(_CPU_A_CODE_))
<BR><BR>[Called By]<UL><LI><a href="#[d1729c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
</UL>

<P><STRONG><a name="[d670d4]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[16a02e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d66648]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_wctomb.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[d66684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d66d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[d66f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d66fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[169d044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[169e1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[169e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[16a02e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[169d788]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _wcrtomb.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[169d7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[169b4d8]"></a>__ARM_fpclassify</STRONG> (ARM, 44 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[169e1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[169c414]"></a>_get_lc_numeric</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[169a8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1699b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2 (via Veneer)
</UL>

<P><STRONG><a name="[169ac68]"></a>_get_lc_ctype</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[169a8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1699c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1698d00]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1698cc4]"></a>_fp_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[169bc1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[169b67c]"></a>__ieee_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[169e250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[169ee08]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[169e1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[169f948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[169f9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[169fab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[169b5c8]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d172d8]"></a>MAM_Init</STRONG> (ARM, 112 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = MAM_Init &rArr; BSP_CPU_ClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d16dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d17bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[d1729c]"></a>PLL_Init</STRONG> (ARM, 436 bytes, Stack size 24 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = PLL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d16cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d16cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d17bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[d735f0]"></a>OS_InitTaskStat</STRONG> (ARM, 84 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d17d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d7272c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d17ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d735b4]"></a>OS_InitTaskIdle</STRONG> (ARM, 84 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d17d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d7272c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d17ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d73578]"></a>OS_InitEventList</STRONG> (ARM, 132 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d72a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d17ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d7353c]"></a>OS_InitTCBList</STRONG> (ARM, 236 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[d72a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d17ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d73500]"></a>OS_InitRdyList</STRONG> (ARM, 88 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d17ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d734c4]"></a>OS_InitMisc</STRONG> (ARM, 88 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d17ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d73488]"></a>OS_SchedNew</STRONG> (ARM, 48 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0e890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d17da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[d729c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d723a8]"></a>OS_FlagTaskRdy</STRONG> (ARM, 148 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d721c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[d72060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[d7218c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[d7236c]"></a>OS_FlagBlock</STRONG> (ARM, 236 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d720d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[d713f4]"></a>OSMutex_RdyAtPrio</STRONG> (ARM, 196 bytes, Stack size 4 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OSMutex_RdyAtPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[d71250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[d7128c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[d681b4]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[d68178]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[d6813c]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[d669cc]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[169e250]"></a>_fp_digits</STRONG> (Thumb, 482 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[169b67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via Veneer)
<LI><a href="#[169c720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[169c798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
<LI><a href="#[169c900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e (via Veneer)
<LI><a href="#[169cea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[169e430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[169e1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[169c234]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[169c2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[169f858]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[169f894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[169db84]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[169dc38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[169d9e0]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[169da94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
