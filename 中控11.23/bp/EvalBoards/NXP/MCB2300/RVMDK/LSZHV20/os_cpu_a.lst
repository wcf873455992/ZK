


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                               uC/OS-II
                       
    4 00000000         ;                                         The Real-Time 
                       Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                             (c) Copyright 1992-2007, M
                       icrium, Weston, FL
    8 00000000         ;                                          All Rights Re
                       served
    9 00000000         ;
   10 00000000         ;                                           Generic ARM 
                       Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V1.82
   14 00000000         ; By        : Jean J. Labrosse
   15 00000000         ;             Jean-Denis Hatier
   16 00000000         ;
   17 00000000         ; For       : ARM7 or ARM9
   18 00000000         ; Mode      : ARM or Thumb
   19 00000000         ; Toolchain : RealView Development Suite
   20 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   21 00000000         ;             ARM Developer Suite (ADS)
   22 00000000         ;             Keil uVision
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         ;                                           PUBLIC FUNCT
                       IONS
   28 00000000         ;*******************************************************
                       *************************************************
   29 00000000         ; External references.
   30 00000000                 IMPORT           OSRunning
   31 00000000                 IMPORT           OSPrioCur
   32 00000000                 IMPORT           OSPrioHighRdy
   33 00000000                 IMPORT           OSTCBCur
   34 00000000                 IMPORT           OSTCBHighRdy
   35 00000000                 IMPORT           OSIntNesting
   36 00000000                 IMPORT           OSIntExit
   37 00000000                 IMPORT           OSTaskSwHook
   38 00000000         
   39 00000000         ; Functions declared in this file.
   40 00000000                 EXPORT           OS_CPU_SR_Save
   41 00000000                 EXPORT           OS_CPU_SR_Restore
   42 00000000                 EXPORT           OSStartHighRdy
   43 00000000                 EXPORT           OSCtxSw
   44 00000000                 EXPORT           OSIntCtxSw
   45 00000000         
   46 00000000         ; Functions related to exception handling.
   47 00000000                 EXPORT           OS_CPU_ARM_ExceptResetHndlr
   48 00000000                 EXPORT           OS_CPU_ARM_ExceptUndefInstrHndl



ARM Macro Assembler    Page 2 


r
   49 00000000                 EXPORT           OS_CPU_ARM_ExceptSwiHndlr
   50 00000000                 EXPORT           OS_CPU_ARM_ExceptPrefetchAbortH
ndlr
   51 00000000                 EXPORT           OS_CPU_ARM_ExceptDataAbortHndlr
   52 00000000                 EXPORT           OS_CPU_ARM_ExceptAddrAbortHndlr
   53 00000000                 EXPORT           OS_CPU_ARM_ExceptIrqHndlr
   54 00000000                 EXPORT           OS_CPU_ARM_ExceptFiqHndlr
   55 00000000         
   56 00000000                 IMPORT           OS_CPU_ExceptHndlr
   57 00000000         
   58 00000000         
   59 00000000         ;*******************************************************
                       *************************************************
   60 00000000         ;                                                EQUATES
                       
   61 00000000         ;*******************************************************
                       *************************************************
   62 00000000         
   63 00000000 000000C0 
                       OS_CPU_ARM_CONTROL_INT_DIS
                               EQU              0xC0        ; Disable both FIQ 
                                                            and IRQ.
   64 00000000 00000040 
                       OS_CPU_ARM_CONTROL_FIQ_DIS
                               EQU              0x40        ; Disable FIQ.
   65 00000000 00000080 
                       OS_CPU_ARM_CONTROL_IRQ_DIS
                               EQU              0x80        ; Disable IRQ.
   66 00000000 00000020 
                       OS_CPU_ARM_CONTROL_THUMB
                               EQU              0x20        ; Set THUMB mode.
   67 00000000 00000000 
                       OS_CPU_ARM_CONTROL_ARM
                               EQU              0x00        ; Set ARM mode.
   68 00000000         
   69 00000000 0000001F 
                       OS_CPU_ARM_MODE_MASK
                               EQU              0x1F
   70 00000000 00000010 
                       OS_CPU_ARM_MODE_USR
                               EQU              0x10
   71 00000000 00000011 
                       OS_CPU_ARM_MODE_FIQ
                               EQU              0x11
   72 00000000 00000012 
                       OS_CPU_ARM_MODE_IRQ
                               EQU              0x12
   73 00000000 00000013 
                       OS_CPU_ARM_MODE_SVC
                               EQU              0x13
   74 00000000 00000017 
                       OS_CPU_ARM_MODE_ABT
                               EQU              0x17
   75 00000000 0000001B 
                       OS_CPU_ARM_MODE_UND
                               EQU              0x1B
   76 00000000 0000001F 
                       OS_CPU_ARM_MODE_SYS



ARM Macro Assembler    Page 3 


                               EQU              0x1F
   77 00000000         
   78 00000000 00000000 
                       OS_CPU_ARM_EXCEPT_RESET
                               EQU              0x00
   79 00000000 00000001 
                       OS_CPU_ARM_EXCEPT_UNDEF_INSTR
                               EQU              0x01
   80 00000000 00000002 
                       OS_CPU_ARM_EXCEPT_SWI
                               EQU              0x02
   81 00000000 00000003 
                       OS_CPU_ARM_EXCEPT_PREFETCH_ABORT
                               EQU              0x03
   82 00000000 00000004 
                       OS_CPU_ARM_EXCEPT_DATA_ABORT
                               EQU              0x04
   83 00000000 00000005 
                       OS_CPU_ARM_EXCEPT_ADDR_ABORT
                               EQU              0x05
   84 00000000 00000006 
                       OS_CPU_ARM_EXCEPT_IRQ
                               EQU              0x06
   85 00000000 00000007 
                       OS_CPU_ARM_EXCEPT_FIQ
                               EQU              0x07
   86 00000000         
   87 00000000         
   88 00000000         ;*******************************************************
                       *************************************************
   89 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   90 00000000         ;*******************************************************
                       *************************************************
   91 00000000         
   92 00000000                 REQUIRE8
   93 00000000                 PRESERVE8
   94 00000000         
   95 00000000         ;*******************************************************
                       **************************************************
   96 00000000         ;                                  CRITICAL SECTION METH
                       OD 3 FUNCTIONS
   97 00000000         ;
   98 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   99 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
  100 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
  101 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
  102 00000000         ;              into the CPU's status register.
  103 00000000         ;
  104 00000000         ; Prototypes : OS_CPU_SR  OS_CPU_SR_Save    (void);
  105 00000000         ;              void       OS_CPU_SR_Restore (OS_CPU_SR  
                       os_cpu_sr);
  106 00000000         ;
  107 00000000         ;
  108 00000000         ; Note(s)    : (1) These functions are used in general l



ARM Macro Assembler    Page 4 


                       ike this:
  109 00000000         ;
  110 00000000         ;                 void Task (void  *p_arg)
  111 00000000         ;                 {
  112 00000000         ;                                                       
                               /* Allocate storage for CPU status register.    
                               */
  113 00000000         ;                 #if (OS_CRITICAL_METHOD == 3)
  114 00000000         ;                      OS_CPU_SR  os_cpu_sr;
  115 00000000         ;                 #endif
  116 00000000         ;
  117 00000000         ;                          :
  118 00000000         ;                          :
  119 00000000         ;                      OS_ENTER_CRITICAL();             
                               /* os_cpu_sr = OS_CPU_SR_Save();                
                               */
  120 00000000         ;                          :
  121 00000000         ;                          :
  122 00000000         ;                      OS_EXIT_CRITICAL();              
                               /* OS_CPU_SR_Restore(cpu_sr);                   
                               */
  123 00000000         ;                          :
  124 00000000         ;                          :
  125 00000000         ;                 }
  126 00000000         ;*******************************************************
                       **************************************************
  127 00000000         
  128 00000000                 AREA             CODE, CODE, READONLY
  129 00000000                 CODE32
  130 00000000         
  131 00000000         OS_CPU_SR_Save
  132 00000000 E10F0000        MRS              R0, CPSR
  133 00000004 E38010C0        ORR              R1, R0, #OS_CPU_ARM_CONTROL_INT
_DIS 
                                                            ; Set IRQ and FIQ b
                                                            its in CPSR to disa
                                                            ble all interrupts.
                                                            
  134 00000008 E121F001        MSR              CPSR_c, R1
  135 0000000C E12FFF1E        BX               LR          ; Disabled, return 
                                                            the original CPSR c
                                                            ontents in R0.
  136 00000010         
  137 00000010         
  138 00000010         OS_CPU_SR_Restore
  139 00000010 E121F000        MSR              CPSR_c, R0
  140 00000014 E12FFF1E        BX               LR
  141 00000018         
  142 00000018         
  143 00000018         ;*******************************************************
                       **************************************************
  144 00000018         ;                                           START MULTIT
                       ASKING
  145 00000018         ;                                       void OSStartHigh
                       Rdy(void)
  146 00000018         ;
  147 00000018         ; Note(s) : 1) OSStartHighRdy() MUST:
  148 00000018         ;              a) Call OSTaskSwHook() then,
  149 00000018         ;              b) Set OSRunning to TRUE,



ARM Macro Assembler    Page 5 


  150 00000018         ;              c) Switch to the highest priority task.
  151 00000018         ;*******************************************************
                       **************************************************
  152 00000018         
  153 00000018                 AREA             CODE, CODE, READONLY
  154 00000018                 CODE32
  155 00000018         
  156 00000018         OSStartHighRdy
  157 00000018         
  158 00000018         ; Change to SVC mode.
  159 00000018 E321F0D3        MSR              CPSR_c, #(OS_CPU_ARM_CONTROL_IN
T_DIS | OS_CPU_ARM_MODE_SVC)
  160 0000001C         
  161 0000001C E59F0248        LDR              R0, __OS_TaskSwHook 
                                                            ; OSTaskSwHook();
  162 00000020 E1A0E00F        MOV              LR, PC
  163 00000024 E12FFF10        BX               R0
  164 00000028         
  165 00000028 E59F0224        LDR              R0, __OS_Running 
                                                            ; OSRunning = TRUE;
                                                            
  166 0000002C E3A01001        MOV              R1, #1
  167 00000030 E5C01000        STRB             R1, [R0]
  168 00000034         
  169 00000034         ; SWITCH TO HIGHEST PRIORITY TASK:
  170 00000034 E59F0228        LDR              R0, __OS_TCBHighRdy ;    Get hi
                                                            ghest priority task
                                                             TCB address,
  171 00000038 E5900000        LDR              R0, [R0]    ;    Get stack poin
                                                            ter,
  172 0000003C E590D000        LDR              SP, [R0]    ;    Switch to the 
                                                            new stack,
  173 00000040         
  174 00000040 E49D0004        LDR              R0, [SP], #4 ;    Pop new task'
                                                            s CPSR,
  175 00000044 E16FF000        MSR              SPSR_cxsf, R0
  176 00000048         
  177 00000048 E8FDDFFF        LDMFD            SP!, {R0-R12, LR, PC}^ ;    Pop
                                                             new task's context
                                                            .
  178 0000004C         
  179 0000004C         
  180 0000004C         ;*******************************************************
                       **************************************************
  181 0000004C         ;                         PERFORM A CONTEXT SWITCH (From
                        task level) - OSCtxSw()
  182 0000004C         ;
  183 0000004C         ; Note(s) : 1) OSCtxSw() is called in SVC mode with BOTH
                        FIQ and IRQ interrupts DISABLED.
  184 0000004C         ;
  185 0000004C         ;           2) The pseudo-code for OSCtxSw() is:
  186 0000004C         ;              a) Save the current task's context onto t
                       he current task's stack,
  187 0000004C         ;              b) OSTCBCur->OSTCBStkPtr = SP;
  188 0000004C         ;              c) OSTaskSwHook();
  189 0000004C         ;              d) OSPrioCur             = OSPrioHighRdy;
                       
  190 0000004C         ;              e) OSTCBCur              = OSTCBHighRdy;
  191 0000004C         ;              f) SP                    = OSTCBHighRdy->



ARM Macro Assembler    Page 6 


                       OSTCBStkPtr;
  192 0000004C         ;              g) Restore the new task's context from th
                       e new task's stack,
  193 0000004C         ;              h) Return to new task's code.
  194 0000004C         ;
  195 0000004C         ;           3) Upon entry:
  196 0000004C         ;              OSTCBCur      points to the OS_TCB of the
                        task to suspend,
  197 0000004C         ;              OSTCBHighRdy  points to the OS_TCB of the
                        task to resume.
  198 0000004C         ;*******************************************************
                       **************************************************
  199 0000004C         
  200 0000004C                 AREA             CODE, CODE, READONLY
  201 0000004C                 CODE32
  202 0000004C         
  203 0000004C         OSCtxSw
  204 0000004C         ; SAVE CURRENT TASK'S CONTEXT:
  205 0000004C E92D4000        STMFD            SP!, {LR}   ;     Push return a
                                                            ddress,
  206 00000050 E92D4000        STMFD            SP!, {LR}
  207 00000054 E92D1FFF        STMFD            SP!, {R0-R12} ;     Push regist
                                                            ers,
  208 00000058 E10F0000        MRS              R0, CPSR    ;     Push current 
                                                            CPSR,
  209 0000005C E31E0001        TST              LR, #1      ;     See if called
                                                             from Thumb mode,
  210 00000060 13800020        ORRNE            R0, R0, #OS_CPU_ARM_CONTROL_THU
MB 
                                                            ;     If yes, set t
                                                            he T-bit.
  211 00000064 E92D0001        STMFD            SP!, {R0}
  212 00000068         
  213 00000068 E59F01F0        LDR              R0, __OS_TCBCur ; OSTCBCur->OST
                                                            CBStkPtr = SP;
  214 0000006C E5901000        LDR              R1, [R0]
  215 00000070 E581D000        STR              SP, [R1]
  216 00000074         
  217 00000074 E59F01F0        LDR              R0, __OS_TaskSwHook 
                                                            ; OSTaskSwHook();
  218 00000078 E1A0E00F        MOV              LR, PC
  219 0000007C E12FFF10        BX               R0
  220 00000080         
  221 00000080 E59F01D0        LDR              R0, __OS_PrioCur ; OSPrioCur = 
                                                            OSPrioHighRdy;
  222 00000084 E59F11D0        LDR              R1, __OS_PrioHighRdy
  223 00000088 E5D12000        LDRB             R2, [R1]
  224 0000008C E5C02000        STRB             R2, [R0]
  225 00000090         
  226 00000090 E59F01C8        LDR              R0, __OS_TCBCur ; OSTCBCur  = O
                                                            STCBHighRdy;
  227 00000094 E59F11C8        LDR              R1, __OS_TCBHighRdy
  228 00000098 E5912000        LDR              R2, [R1]
  229 0000009C E5802000        STR              R2, [R0]
  230 000000A0         
  231 000000A0 E592D000        LDR              SP, [R2]    ; SP = OSTCBHighRdy
                                                            ->OSTCBStkPtr;
  232 000000A4         
  233 000000A4         ; RESTORE NEW TASK'S CONTEXT:



ARM Macro Assembler    Page 7 


  234 000000A4 E8BD0001        LDMFD            SP!, {R0}   ;    Pop new task's
                                                             CPSR,
  235 000000A8 E16FF000        MSR              SPSR_cxsf, R0
  236 000000AC         
  237 000000AC E8FDDFFF        LDMFD            SP!, {R0-R12, LR, PC}^ ;    Pop
                                                             new task's context
                                                            .
  238 000000B0         
  239 000000B0         
  240 000000B0         ;*******************************************************
                       **************************************************
  241 000000B0         ;                     PERFORM A CONTEXT SWITCH (From int
                       errupt level) - OSIntCtxSw()
  242 000000B0         ;
  243 000000B0         ; Note(s) : 1) OSIntCtxSw() is called in SVC mode with B
                       OTH FIQ and IRQ interrupts DISABLED.
  244 000000B0         ;
  245 000000B0         ;           2) The pseudo-code for OSCtxSw() is:
  246 000000B0         ;              a) OSTaskSwHook();
  247 000000B0         ;              b) OSPrioCur             = OSPrioHighRdy;
                       
  248 000000B0         ;              c) OSTCBCur              = OSTCBHighRdy;
  249 000000B0         ;              d) SP                    = OSTCBHighRdy->
                       OSTCBStkPtr;
  250 000000B0         ;              e) Restore the new task's context from th
                       e new task's stack,
  251 000000B0         ;              f) Return to new task's code.
  252 000000B0         ;
  253 000000B0         ;           3) Upon entry:
  254 000000B0         ;              OSTCBCur      points to the OS_TCB of the
                        task to suspend,
  255 000000B0         ;              OSTCBHighRdy  points to the OS_TCB of the
                        task to resume.
  256 000000B0         ;*******************************************************
                       **************************************************
  257 000000B0         
  258 000000B0                 AREA             CODE, CODE, READONLY
  259 000000B0                 CODE32
  260 000000B0         
  261 000000B0         OSIntCtxSw
  262 000000B0 E59F01B4        LDR              R0, __OS_TaskSwHook 
                                                            ; OSTaskSwHook();
  263 000000B4 E1A0E00F        MOV              LR, PC
  264 000000B8 E12FFF10        BX               R0
  265 000000BC         
  266 000000BC E59F0194        LDR              R0, __OS_PrioCur ; OSPrioCur = 
                                                            OSPrioHighRdy;
  267 000000C0 E59F1194        LDR              R1, __OS_PrioHighRdy
  268 000000C4 E5D12000        LDRB             R2, [R1]
  269 000000C8 E5C02000        STRB             R2, [R0]
  270 000000CC         
  271 000000CC E59F018C        LDR              R0, __OS_TCBCur ; OSTCBCur  = O
                                                            STCBHighRdy;
  272 000000D0 E59F118C        LDR              R1, __OS_TCBHighRdy
  273 000000D4 E5912000        LDR              R2, [R1]
  274 000000D8 E5802000        STR              R2, [R0]
  275 000000DC         
  276 000000DC E592D000        LDR              SP, [R2]    ; SP = OSTCBHighRdy
                                                            ->OSTCBStkPtr;



ARM Macro Assembler    Page 8 


  277 000000E0         
  278 000000E0         ; RESTORE NEW TASK'S CONTEXT:
  279 000000E0 E8BD0001        LDMFD            SP!, {R0}   ;    Pop new task's
                                                             CPSR,
  280 000000E4 E16FF000        MSR              SPSR_cxsf, R0
  281 000000E8         
  282 000000E8 E8FDDFFF        LDMFD            SP!, {R0-R12, LR, PC}^ ;    Pop
                                                             new task's context
                                                            .
  283 000000EC         
  284 000000EC         
  285 000000EC         ;*******************************************************
                       *************************************************
  286 000000EC         ;                                        RESET EXCEPTION
                        HANDLER
  287 000000EC         ;
  288 000000EC         ; Register Usage:  R0     Exception Type
  289 000000EC         ;                  R1
  290 000000EC         ;                  R2
  291 000000EC         ;                  R3     Return PC
  292 000000EC         ;*******************************************************
                       *************************************************
  293 000000EC         
  294 000000EC                 AREA             CODE, CODE, READONLY
  295 000000EC                 CODE32
  296 000000EC         
  297 000000EC         OS_CPU_ARM_ExceptResetHndlr
  298 000000EC         ; LR offset to return from this exception:  0.
  299 000000EC         ;  (there is no way to return from a RESET exception).
  300 000000EC E92D5FFF        STMFD            SP!, {R0-R12, LR} ; Push workin
                                                            g registers.
  301 000000F0 E1A0300E        MOV              R3, LR      ; Save link registe
                                                            r.
  302 000000F4 E3A00000        MOV              R0, #OS_CPU_ARM_EXCEPT_RESET ; 
                                                            Set exception ID to
                                                             OS_CPU_ARM_EXCEPT_
                                                            RESET.
  303 000000F8 EA000020        B                OS_CPU_ARM_ExceptHndlr ; Branch
                                                             to global exceptio
                                                            n handler.
  304 000000FC         
  305 000000FC         
  306 000000FC         ;*******************************************************
                       *************************************************
  307 000000FC         ;                                UNDEFINED INSTRUCTION E
                       XCEPTION HANDLER
  308 000000FC         ;
  309 000000FC         ; Register Usage:  R0     Exception Type
  310 000000FC         ;                  R1
  311 000000FC         ;                  R2
  312 000000FC         ;                  R3     Return PC
  313 000000FC         ;*******************************************************
                       *************************************************
  314 000000FC         
  315 000000FC                 AREA             CODE, CODE, READONLY
  316 000000FC                 CODE32
  317 000000FC         
  318 000000FC         OS_CPU_ARM_ExceptUndefInstrHndlr
  319 000000FC         ; LR offset to return from this exception:  0.



ARM Macro Assembler    Page 9 


  320 000000FC E92D5FFF        STMFD            SP!, {R0-R12, LR} ; Push workin
                                                            g registers.
  321 00000100 E1A0300E        MOV              R3, LR      ; Save link registe
                                                            r.
  322 00000104 E3A00001        MOV              R0, #OS_CPU_ARM_EXCEPT_UNDEF_IN
STR 
                                                            ; Set exception ID 
                                                            to OS_CPU_ARM_EXCEP
                                                            T_UNDEF_INSTR.
  323 00000108 EA00001C        B                OS_CPU_ARM_ExceptHndlr ; Branch
                                                             to global exceptio
                                                            n handler.
  324 0000010C         
  325 0000010C         
  326 0000010C         ;*******************************************************
                       *************************************************
  327 0000010C         ;                                 SOFTWARE INTERRUPT EXC
                       EPTION HANDLER
  328 0000010C         ;
  329 0000010C         ; Register Usage:  R0     Exception Type
  330 0000010C         ;                  R1
  331 0000010C         ;                  R2
  332 0000010C         ;                  R3     Return PC
  333 0000010C         ;*******************************************************
                       *************************************************
  334 0000010C         
  335 0000010C                 AREA             CODE, CODE, READONLY
  336 0000010C                 CODE32
  337 0000010C         
  338 0000010C         OS_CPU_ARM_ExceptSwiHndlr
  339 0000010C         ; LR offset to return from this exception:  0.
  340 0000010C E92D5FFF        STMFD            SP!, {R0-R12, LR} ; Push workin
                                                            g registers.
  341 00000110 E1A0300E        MOV              R3, LR      ; Save link registe
                                                            r.
  342 00000114 E3A00002        MOV              R0, #OS_CPU_ARM_EXCEPT_SWI ; Se
                                                            t exception ID to O
                                                            S_CPU_ARM_EXCEPT_SW
                                                            I.
  343 00000118 EA000018        B                OS_CPU_ARM_ExceptHndlr ; Branch
                                                             to global exceptio
                                                            n handler.
  344 0000011C         
  345 0000011C         
  346 0000011C         ;*******************************************************
                       *************************************************
  347 0000011C         ;                                   PREFETCH ABORT EXCEP
                       TION HANDLER
  348 0000011C         ;
  349 0000011C         ; Register Usage:  R0     Exception Type
  350 0000011C         ;                  R1
  351 0000011C         ;                  R2
  352 0000011C         ;                  R3     Return PC
  353 0000011C         ;*******************************************************
                       *************************************************
  354 0000011C         
  355 0000011C                 AREA             CODE, CODE, READONLY
  356 0000011C                 CODE32
  357 0000011C         



ARM Macro Assembler    Page 10 


  358 0000011C         OS_CPU_ARM_ExceptPrefetchAbortHndlr
  359 0000011C E24EE004        SUB              LR, LR, #4  ; LR offset to retu
                                                            rn from this except
                                                            ion: -4.
  360 00000120 E92D5FFF        STMFD            SP!, {R0-R12, LR} ; Push workin
                                                            g registers.
  361 00000124 E1A0300E        MOV              R3, LR      ; Save link registe
                                                            r.
  362 00000128 E3A00003        MOV              R0, #OS_CPU_ARM_EXCEPT_PREFETCH
_ABORT 
                                                            ; Set exception ID 
                                                            to OS_CPU_ARM_EXCEP
                                                            T_PREFETCH_ABORT.
  363 0000012C EA000013        B                OS_CPU_ARM_ExceptHndlr ; Branch
                                                             to global exceptio
                                                            n handler.
  364 00000130         
  365 00000130         
  366 00000130         ;*******************************************************
                       *************************************************
  367 00000130         ;                                     DATA ABORT EXCEPTI
                       ON HANDLER
  368 00000130         ;
  369 00000130         ; Register Usage:  R0     Exception Type
  370 00000130         ;                  R1
  371 00000130         ;                  R2
  372 00000130         ;                  R3     Return PC
  373 00000130         ;*******************************************************
                       *************************************************
  374 00000130         
  375 00000130                 AREA             CODE, CODE, READONLY
  376 00000130                 CODE32
  377 00000130         
  378 00000130         OS_CPU_ARM_ExceptDataAbortHndlr
  379 00000130 E24EE008        SUB              LR, LR, #8  ; LR offset to retu
                                                            rn from this except
                                                            ion: -8.
  380 00000134 E92D5FFF        STMFD            SP!, {R0-R12, LR} ; Push workin
                                                            g registers.
  381 00000138 E1A0300E        MOV              R3, LR      ; Save link registe
                                                            r.
  382 0000013C E3A00004        MOV              R0, #OS_CPU_ARM_EXCEPT_DATA_ABO
RT 
                                                            ; Set exception ID 
                                                            to OS_CPU_ARM_EXCEP
                                                            T_DATA_ABORT.
  383 00000140 EA00000E        B                OS_CPU_ARM_ExceptHndlr ; Branch
                                                             to global exceptio
                                                            n handler.
  384 00000144         
  385 00000144         
  386 00000144         ;*******************************************************
                       *************************************************
  387 00000144         ;                                    ADDRESS ABORT EXCEP
                       TION HANDLER
  388 00000144         ;
  389 00000144         ; Register Usage:  R0     Exception Type
  390 00000144         ;                  R1
  391 00000144         ;                  R2



ARM Macro Assembler    Page 11 


  392 00000144         ;                  R3     Return PC
  393 00000144         ;*******************************************************
                       *************************************************
  394 00000144         
  395 00000144                 AREA             CODE, CODE, READONLY
  396 00000144                 CODE32
  397 00000144         
  398 00000144         OS_CPU_ARM_ExceptAddrAbortHndlr
  399 00000144 E24EE008        SUB              LR, LR, #8  ; LR offset to retu
                                                            rn from this except
                                                            ion: -8.
  400 00000148 E92D5FFF        STMFD            SP!, {R0-R12, LR} ; Push workin
                                                            g registers.
  401 0000014C E1A0300E        MOV              R3, LR      ; Save link registe
                                                            r.
  402 00000150 E3A00005        MOV              R0, #OS_CPU_ARM_EXCEPT_ADDR_ABO
RT 
                                                            ; Set exception ID 
                                                            to OS_CPU_ARM_EXCEP
                                                            T_ADDR_ABORT.
  403 00000154 EA000009        B                OS_CPU_ARM_ExceptHndlr ; Branch
                                                             to global exceptio
                                                            n handler.
  404 00000158         
  405 00000158         
  406 00000158         ;*******************************************************
                       *************************************************
  407 00000158         ;                                  INTERRUPT REQUEST EXC
                       EPTION HANDLER
  408 00000158         ;
  409 00000158         ; Register Usage:  R0     Exception Type
  410 00000158         ;                  R1
  411 00000158         ;                  R2
  412 00000158         ;                  R3     Return PC
  413 00000158         ;*******************************************************
                       *************************************************
  414 00000158         
  415 00000158                 AREA             CODE, CODE, READONLY
  416 00000158                 CODE32
  417 00000158         
  418 00000158         OS_CPU_ARM_ExceptIrqHndlr
  419 00000158 E24EE004        SUB              LR, LR, #4  ; LR offset to retu
                                                            rn from this except
                                                            ion: -4.
  420 0000015C E92D5FFF        STMFD            SP!, {R0-R12, LR} ; Push workin
                                                            g registers.
  421 00000160 E1A0300E        MOV              R3, LR      ; Save link registe
                                                            r.
  422 00000164 E3A00006        MOV              R0, #OS_CPU_ARM_EXCEPT_IRQ ; Se
                                                            t exception ID to O
                                                            S_CPU_ARM_EXCEPT_IR
                                                            Q.
  423 00000168 EA000004        B                OS_CPU_ARM_ExceptHndlr ; Branch
                                                             to global exceptio
                                                            n handler.
  424 0000016C         
  425 0000016C         
  426 0000016C         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 12 


  427 0000016C         ;                               FAST INTERRUPT REQUEST E
                       XCEPTION HANDLER
  428 0000016C         ;
  429 0000016C         ; Register Usage:  R0     Exception Type
  430 0000016C         ;                  R1
  431 0000016C         ;                  R2
  432 0000016C         ;                  R3     Return PC
  433 0000016C         ;*******************************************************
                       *************************************************
  434 0000016C         
  435 0000016C                 AREA             CODE, CODE, READONLY
  436 0000016C                 CODE32
  437 0000016C         
  438 0000016C         OS_CPU_ARM_ExceptFiqHndlr
  439 0000016C E24EE004        SUB              LR, LR, #4  ; LR offset to retu
                                                            rn from this except
                                                            ion: -4.
  440 00000170 E92D5FFF        STMFD            SP!, {R0-R12, LR} ; Push workin
                                                            g registers.
  441 00000174 E1A0300E        MOV              R3, LR      ; Save link registe
                                                            r.
  442 00000178 E3A00007        MOV              R0, #OS_CPU_ARM_EXCEPT_FIQ ; Se
                                                            t exception ID to O
                                                            S_CPU_ARM_EXCEPT_FI
                                                            Q.
  443 0000017C EAFFFFFF        B                OS_CPU_ARM_ExceptHndlr ; Branch
                                                             to global exceptio
                                                            n handler.
  444 00000180         
  445 00000180         
  446 00000180         ;*******************************************************
                       *************************************************
  447 00000180         ;                                       GLOBAL EXCEPTION
                        HANDLER
  448 00000180         ;
  449 00000180         ; Register Usage:  R0     Exception Type
  450 00000180         ;                  R1   Exception's SPSR
  451 00000180         ;                  R2     Old CPU mode
  452 00000180         ;                  R3     Return PC
  453 00000180         ;*******************************************************
                       *************************************************
  454 00000180         
  455 00000180                 AREA             CODE, CODE, READONLY
  456 00000180                 CODE32
  457 00000180         
  458 00000180         OS_CPU_ARM_ExceptHndlr
  459 00000180 E14F1000        MRS              R1, SPSR    ; Save CPSR (i.e. e
                                                            xception's SPSR).
  460 00000184         
  461 00000184         ; DETERMINE IF WE INTERRUPTED A TASK OR ANOTHER LOWER PR
                       IORITY EXCEPTION:
  462 00000184         ;   SPSR.Mode = SVC                :  task,
  463 00000184         ;   SPSR.Mode = FIQ, IRQ, ABT, UND :  other exceptions,
  464 00000184         ;   SPSR.Mode = USR                : *unsupported state*
                       .
  465 00000184 E201201F        AND              R2, R1, #OS_CPU_ARM_MODE_MASK
  466 00000188 E3520013        CMP              R2,     #OS_CPU_ARM_MODE_SVC
  467 0000018C 1A00001F        BNE              OS_CPU_ARM_ExceptHndlr_BreakExc
ept



ARM Macro Assembler    Page 13 


  468 00000190         
  469 00000190         
  470 00000190         ;*******************************************************
                       *************************************************
  471 00000190         ;                                  EXCEPTION HANDLER: TA
                       SK INTERRUPTED
  472 00000190         ;
  473 00000190         ; Register Usage:  R0     Exception Type
  474 00000190         ;                  R1   Exception's SPSR
  475 00000190         ;                  R2   Exception's CPSR
  476 00000190         ;                  R3     Return PC
  477 00000190         ;                  R4     Exception's SP
  478 00000190         ;*******************************************************
                       *************************************************
  479 00000190         
  480 00000190                 AREA             CODE, CODE, READONLY
  481 00000190                 CODE32
  482 00000190         
  483 00000190         OS_CPU_ARM_ExceptHndlr_BreakTask
  484 00000190 E10F2000        MRS              R2, CPSR    ; Save exception's 
                                                            CPSR.
  485 00000194 E1A0400D        MOV              R4, SP      ; Save exception's 
                                                            stack pointer.
  486 00000198         
  487 00000198         ; Change to SVC mode & disable interruptions.
  488 00000198 E321F0D3        MSR              CPSR_c, #(OS_CPU_ARM_CONTROL_IN
T_DIS | OS_CPU_ARM_MODE_SVC)
  489 0000019C         
  490 0000019C         ; SAVE TASK'S CONTEXT ONTO TASK'S STACK:
  491 0000019C E92D0008        STMFD            SP!, {R3}   ;   Push task's PC,
                                                            
  492 000001A0 E92D4000        STMFD            SP!, {LR}   ;   Push task's LR,
                                                            
  493 000001A4 E92D1FE0        STMFD            SP!, {R5-R12} ;   Push task's R
                                                            12-R5,
  494 000001A8 E8B403E0        LDMFD            R4!, {R5-R9} ;   Move task's R4
                                                            -R0 from exception 
                                                            stack to task's sta
                                                            ck.
  495 000001AC E92D03E0        STMFD            SP!, {R5-R9}
  496 000001B0 E92D0002        STMFD            SP!, {R1}   ;   Push task's CPS
                                                            R (i.e. exception S
                                                            PSR).
  497 000001B4         
  498 000001B4         ; if (OSRunning == 1)
  499 000001B4 E59F1098        LDR              R1, __OS_Running
  500 000001B8 E5D11000        LDRB             R1, [R1]
  501 000001BC E3510001        CMP              R1, #1
  502 000001C0 1A000006        BNE              OS_CPU_ARM_ExceptHndlr_BreakTas
k_1
  503 000001C4         
  504 000001C4         ; HANDLE NESTING COUNTER:
  505 000001C4 E59F309C        LDR              R3, __OS_IntNesting 
                                                            ;   OSIntNesting++;
                                                            
  506 000001C8 E5D34000        LDRB             R4, [R3]
  507 000001CC E2844001        ADD              R4, R4, #1
  508 000001D0 E5C34000        STRB             R4, [R3]
  509 000001D4         



ARM Macro Assembler    Page 14 


  510 000001D4 E59F3084        LDR              R3, __OS_TCBCur ;   OSTCBCur->O
                                                            STCBStkPtr = SP;
  511 000001D8 E5934000        LDR              R4, [R3]
  512 000001DC E584D000        STR              SP, [R4]
  513 000001E0         
  514 000001E0         OS_CPU_ARM_ExceptHndlr_BreakTask_1
  515 000001E0 E12FF002        MSR              CPSR_cxsf, R2 ; RESTORE INTERRU
                                                            PTED MODE.
  516 000001E4         
  517 000001E4         ; EXECUTE EXCEPTION HANDLER:
  518 000001E4 E59F1088        LDR              R1, __OS_CPU_ExceptHndlr ; OS_C
                                                            PU_ExceptHndlr(exce
                                                            pt_type = R0);
  519 000001E8 E1A0E00F        MOV              LR, PC
  520 000001EC E12FFF11        BX               R1
  521 000001F0         
  522 000001F0         ; Adjust exception stack pointer.  This is needed becaus
                       e
  523 000001F0         ; exception stack is not used when restoring task contex
                       t.
  524 000001F0 E28DD038        ADD              SP, SP, #(14 * 4)
  525 000001F4         
  526 000001F4         ; Change to SVC mode & disable interruptions.
  527 000001F4 E321F0D3        MSR              CPSR_c, #(OS_CPU_ARM_CONTROL_IN
T_DIS | OS_CPU_ARM_MODE_SVC)
  528 000001F8         
  529 000001F8         ; Call OSIntExit().  This call MAY never return if a rea
                       dy
  530 000001F8         ;  task with higher priority than the interrupted one is
                       
  531 000001F8         ;  found.
  532 000001F8 E59F0070        LDR              R0, __OS_IntExit
  533 000001FC E1A0E00F        MOV              LR, PC
  534 00000200 E12FFF10        BX               R0
  535 00000204         
  536 00000204         ; RESTORE NEW TASK'S CONTEXT:
  537 00000204 E8BD0001        LDMFD            SP!, {R0}   ;    Pop new task's
                                                             CPSR,
  538 00000208 E16FF000        MSR              SPSR_cxsf, R0
  539 0000020C         
  540 0000020C E8FDDFFF        LDMFD            SP!, {R0-R12, LR, PC}^ ;    Pop
                                                             new task's context
                                                            .
  541 00000210         
  542 00000210         
  543 00000210         ;*******************************************************
                       *************************************************
  544 00000210         ;                               EXCEPTION HANDLER: EXCEP
                       TION INTERRUPTED
  545 00000210         ;
  546 00000210         ; Register Usage:  R0     Exception Type
  547 00000210         ;                  R1
  548 00000210         ;                  R2
  549 00000210         ;                  R3
  550 00000210         ;*******************************************************
                       *************************************************
  551 00000210         
  552 00000210         OS_CPU_ARM_ExceptHndlr_BreakExcept
  553 00000210 E10F2000        MRS              R2, CPSR    ; Save exception's 



ARM Macro Assembler    Page 15 


                                                            CPSR.
  554 00000214         
  555 00000214         ; Change to SVC mode & disable interruptions.
  556 00000214 E321F0D3        MSR              CPSR_c, #(OS_CPU_ARM_CONTROL_IN
T_DIS | OS_CPU_ARM_MODE_SVC)
  557 00000218         
  558 00000218         ; HANDLE NESTING COUNTER:
  559 00000218 E59F3048        LDR              R3, __OS_IntNesting 
                                                            ;   OSIntNesting++;
                                                            
  560 0000021C E5D34000        LDRB             R4, [R3]
  561 00000220 E2844001        ADD              R4, R4, #1
  562 00000224 E5C34000        STRB             R4, [R3]
  563 00000228         
  564 00000228 E12FF002        MSR              CPSR_cxsf, R2 ; RESTORE INTERRU
                                                            PTED MODE.
  565 0000022C         
  566 0000022C         ; EXECUTE EXCEPTION HANDLER:
  567 0000022C E59F3040        LDR              R3, __OS_CPU_ExceptHndlr ; OS_C
                                                            PU_ExceptHndlr(exce
                                                            pt_type = R0);
  568 00000230 E1A0E00F        MOV              LR, PC
  569 00000234 E12FFF13        BX               R3
  570 00000238         
  571 00000238         ; Change to SVC mode & disable interruptions.
  572 00000238 E321F0D3        MSR              CPSR_c, #(OS_CPU_ARM_CONTROL_IN
T_DIS | OS_CPU_ARM_MODE_SVC)
  573 0000023C         
  574 0000023C         ; HANDLE NESTING COUNTER:
  575 0000023C E59F3024        LDR              R3, __OS_IntNesting 
                                                            ;   OSIntNesting--;
                                                            
  576 00000240 E5D34000        LDRB             R4, [R3]
  577 00000244 E2444001        SUB              R4, R4, #1
  578 00000248 E5C34000        STRB             R4, [R3]
  579 0000024C         
  580 0000024C E12FF002        MSR              CPSR_cxsf, R2 ; RESTORE INTERRU
                                                            PTED MODE.
  581 00000250         
  582 00000250         ; RESTORE OLD CONTEXT:
  583 00000250 E8FD9FFF        LDMFD            SP!, {R0-R12, PC}^ ; Pull worki
                                                            ng registers and re
                                                            turn from exception
                                                            .
  584 00000254         
  585 00000254         
  586 00000254         ;*******************************************************
                       **************************************************
  587 00000254         ;                                     POINTERS TO VARIAB
                       LES
  588 00000254         ;*******************************************************
                       **************************************************
  589 00000254         
  590 00000254                 AREA             CODE, CODE, READONLY
  591 00000254                 CODE32
  592 00000254         
  593 00000254         __OS_Running
  594 00000254 00000000        DCD              OSRunning
  595 00000258         



ARM Macro Assembler    Page 16 


  596 00000258         __OS_PrioCur
  597 00000258 00000000        DCD              OSPrioCur
  598 0000025C         
  599 0000025C         __OS_PrioHighRdy
  600 0000025C 00000000        DCD              OSPrioHighRdy
  601 00000260         
  602 00000260         __OS_TCBCur
  603 00000260 00000000        DCD              OSTCBCur
  604 00000264         
  605 00000264         __OS_TCBHighRdy
  606 00000264 00000000        DCD              OSTCBHighRdy
  607 00000268         
  608 00000268         __OS_IntNesting
  609 00000268 00000000        DCD              OSIntNesting
  610 0000026C         
  611 0000026C         __OS_TaskSwHook
  612 0000026C 00000000        DCD              OSTaskSwHook
  613 00000270         
  614 00000270         __OS_IntExit
  615 00000270 00000000        DCD              OSIntExit
  616 00000274         
  617 00000274         __OS_CPU_ExceptHndlr
  618 00000274 00000000        DCD              OS_CPU_ExceptHndlr
  619 00000278         
  620 00000278         
  621 00000278                 END
Command Line: --debug --xref --device=DARMP --apcs=interwork -o.\os_cpu_a.o -IC
:\Keil\ARM\INC\Philips --list=.\os_cpu_a.lst ..\..\..\..\..\uCOS-II\Ports\ARM\G
eneric\RealView\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CODE 00000000

Symbol: CODE
   Definitions
      At line 128 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      None
Comment: CODE unused
OSCtxSw 0000004C

Symbol: OSCtxSw
   Definitions
      At line 203 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 43 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 000000B0

Symbol: OSIntCtxSw
   Definitions
      At line 261 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 44 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
Comment: OSIntCtxSw used once
OSStartHighRdy 00000018

Symbol: OSStartHighRdy
   Definitions
      At line 156 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 42 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_ARM_ExceptAddrAbortHndlr 00000144

Symbol: OS_CPU_ARM_ExceptAddrAbortHndlr
   Definitions
      At line 398 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 52 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
Comment: OS_CPU_ARM_ExceptAddrAbortHndlr used once
OS_CPU_ARM_ExceptDataAbortHndlr 00000130

Symbol: OS_CPU_ARM_ExceptDataAbortHndlr
   Definitions
      At line 378 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 51 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
Comment: OS_CPU_ARM_ExceptDataAbortHndlr used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

OS_CPU_ARM_ExceptFiqHndlr 0000016C

Symbol: OS_CPU_ARM_ExceptFiqHndlr
   Definitions
      At line 438 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 54 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
Comment: OS_CPU_ARM_ExceptFiqHndlr used once
OS_CPU_ARM_ExceptHndlr 00000180

Symbol: OS_CPU_ARM_ExceptHndlr
   Definitions
      At line 458 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 303 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 323 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 343 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 363 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 383 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 403 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 423 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 443 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm

OS_CPU_ARM_ExceptHndlr_BreakExcept 00000210

Symbol: OS_CPU_ARM_ExceptHndlr_BreakExcept
   Definitions
      At line 552 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 467 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OS_CPU_ARM_ExceptHndlr_BreakExcept used once
OS_CPU_ARM_ExceptHndlr_BreakTask 00000190

Symbol: OS_CPU_ARM_ExceptHndlr_BreakTask
   Definitions
      At line 483 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      None
Comment: OS_CPU_ARM_ExceptHndlr_BreakTask unused
OS_CPU_ARM_ExceptHndlr_BreakTask_1 000001E0

Symbol: OS_CPU_ARM_ExceptHndlr_BreakTask_1
   Definitions
      At line 514 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 502 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OS_CPU_ARM_ExceptHndlr_BreakTask_1 used once
OS_CPU_ARM_ExceptIrqHndlr 00000158

Symbol: OS_CPU_ARM_ExceptIrqHndlr
   Definitions
      At line 418 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 53 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
Comment: OS_CPU_ARM_ExceptIrqHndlr used once
OS_CPU_ARM_ExceptPrefetchAbortHndlr 0000011C

Symbol: OS_CPU_ARM_ExceptPrefetchAbortHndlr
   Definitions
      At line 358 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 50 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
Comment: OS_CPU_ARM_ExceptPrefetchAbortHndlr used once
OS_CPU_ARM_ExceptResetHndlr 000000EC

Symbol: OS_CPU_ARM_ExceptResetHndlr
   Definitions
      At line 297 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 47 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
Comment: OS_CPU_ARM_ExceptResetHndlr used once
OS_CPU_ARM_ExceptSwiHndlr 0000010C

Symbol: OS_CPU_ARM_ExceptSwiHndlr
   Definitions
      At line 338 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 49 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
Comment: OS_CPU_ARM_ExceptSwiHndlr used once
OS_CPU_ARM_ExceptUndefInstrHndlr 000000FC

Symbol: OS_CPU_ARM_ExceptUndefInstrHndlr
   Definitions
      At line 318 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 48 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
Comment: OS_CPU_ARM_ExceptUndefInstrHndlr used once
OS_CPU_SR_Restore 00000010

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 138 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

cpu_a.asm
   Uses
      At line 41 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 131 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 40 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
Comment: OS_CPU_SR_Save used once
__OS_CPU_ExceptHndlr 00000274

Symbol: __OS_CPU_ExceptHndlr
   Definitions
      At line 617 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 518 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 567 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm

__OS_IntExit 00000270

Symbol: __OS_IntExit
   Definitions
      At line 614 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 532 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: __OS_IntExit used once
__OS_IntNesting 00000268

Symbol: __OS_IntNesting
   Definitions
      At line 608 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 505 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 559 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 575 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm

__OS_PrioCur 00000258

Symbol: __OS_PrioCur
   Definitions
      At line 596 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 221 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

cpu_a.asm
      At line 266 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm

__OS_PrioHighRdy 0000025C

Symbol: __OS_PrioHighRdy
   Definitions
      At line 599 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 222 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 267 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm

__OS_Running 00000254

Symbol: __OS_Running
   Definitions
      At line 593 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 165 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 499 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm

__OS_TCBCur 00000260

Symbol: __OS_TCBCur
   Definitions
      At line 602 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 213 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 226 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 271 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 510 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm

__OS_TCBHighRdy 00000264

Symbol: __OS_TCBHighRdy
   Definitions
      At line 605 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 170 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 227 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 272 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm

__OS_TaskSwHook 0000026C



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols


Symbol: __OS_TaskSwHook
   Definitions
      At line 611 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
   Uses
      At line 161 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 217 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 262 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm

27 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

OS_CPU_ARM_CONTROL_ARM 00000000

Symbol: OS_CPU_ARM_CONTROL_ARM
   Definitions
      At line 67 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      None
Comment: OS_CPU_ARM_CONTROL_ARM unused
OS_CPU_ARM_CONTROL_FIQ_DIS 00000040

Symbol: OS_CPU_ARM_CONTROL_FIQ_DIS
   Definitions
      At line 64 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      None
Comment: OS_CPU_ARM_CONTROL_FIQ_DIS unused
OS_CPU_ARM_CONTROL_INT_DIS 000000C0

Symbol: OS_CPU_ARM_CONTROL_INT_DIS
   Definitions
      At line 63 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 133 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 159 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 488 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 527 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 556 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 572 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm

OS_CPU_ARM_CONTROL_IRQ_DIS 00000080

Symbol: OS_CPU_ARM_CONTROL_IRQ_DIS
   Definitions
      At line 65 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      None
Comment: OS_CPU_ARM_CONTROL_IRQ_DIS unused
OS_CPU_ARM_CONTROL_THUMB 00000020

Symbol: OS_CPU_ARM_CONTROL_THUMB
   Definitions
      At line 66 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 210 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OS_CPU_ARM_CONTROL_THUMB used once
OS_CPU_ARM_EXCEPT_ADDR_ABORT 00000005




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: OS_CPU_ARM_EXCEPT_ADDR_ABORT
   Definitions
      At line 83 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 402 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OS_CPU_ARM_EXCEPT_ADDR_ABORT used once
OS_CPU_ARM_EXCEPT_DATA_ABORT 00000004

Symbol: OS_CPU_ARM_EXCEPT_DATA_ABORT
   Definitions
      At line 82 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 382 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OS_CPU_ARM_EXCEPT_DATA_ABORT used once
OS_CPU_ARM_EXCEPT_FIQ 00000007

Symbol: OS_CPU_ARM_EXCEPT_FIQ
   Definitions
      At line 85 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 442 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OS_CPU_ARM_EXCEPT_FIQ used once
OS_CPU_ARM_EXCEPT_IRQ 00000006

Symbol: OS_CPU_ARM_EXCEPT_IRQ
   Definitions
      At line 84 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 422 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OS_CPU_ARM_EXCEPT_IRQ used once
OS_CPU_ARM_EXCEPT_PREFETCH_ABORT 00000003

Symbol: OS_CPU_ARM_EXCEPT_PREFETCH_ABORT
   Definitions
      At line 81 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 362 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OS_CPU_ARM_EXCEPT_PREFETCH_ABORT used once
OS_CPU_ARM_EXCEPT_RESET 00000000

Symbol: OS_CPU_ARM_EXCEPT_RESET
   Definitions
      At line 78 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 302 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OS_CPU_ARM_EXCEPT_RESET used once
OS_CPU_ARM_EXCEPT_SWI 00000002



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: OS_CPU_ARM_EXCEPT_SWI
   Definitions
      At line 80 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 342 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OS_CPU_ARM_EXCEPT_SWI used once
OS_CPU_ARM_EXCEPT_UNDEF_INSTR 00000001

Symbol: OS_CPU_ARM_EXCEPT_UNDEF_INSTR
   Definitions
      At line 79 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 322 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OS_CPU_ARM_EXCEPT_UNDEF_INSTR used once
OS_CPU_ARM_MODE_ABT 00000017

Symbol: OS_CPU_ARM_MODE_ABT
   Definitions
      At line 74 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      None
Comment: OS_CPU_ARM_MODE_ABT unused
OS_CPU_ARM_MODE_FIQ 00000011

Symbol: OS_CPU_ARM_MODE_FIQ
   Definitions
      At line 71 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      None
Comment: OS_CPU_ARM_MODE_FIQ unused
OS_CPU_ARM_MODE_IRQ 00000012

Symbol: OS_CPU_ARM_MODE_IRQ
   Definitions
      At line 72 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      None
Comment: OS_CPU_ARM_MODE_IRQ unused
OS_CPU_ARM_MODE_MASK 0000001F

Symbol: OS_CPU_ARM_MODE_MASK
   Definitions
      At line 69 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 465 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OS_CPU_ARM_MODE_MASK used once
OS_CPU_ARM_MODE_SVC 00000013

Symbol: OS_CPU_ARM_MODE_SVC



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 73 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 159 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 466 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 488 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 527 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 556 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
      At line 572 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm

OS_CPU_ARM_MODE_SYS 0000001F

Symbol: OS_CPU_ARM_MODE_SYS
   Definitions
      At line 76 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      None
Comment: OS_CPU_ARM_MODE_SYS unused
OS_CPU_ARM_MODE_UND 0000001B

Symbol: OS_CPU_ARM_MODE_UND
   Definitions
      At line 75 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      None
Comment: OS_CPU_ARM_MODE_UND unused
OS_CPU_ARM_MODE_USR 00000010

Symbol: OS_CPU_ARM_MODE_USR
   Definitions
      At line 70 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      None
Comment: OS_CPU_ARM_MODE_USR unused
21 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 36 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 615 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OSIntExit used once
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 35 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 609 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OSIntNesting used once
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 31 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 597 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 32 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 600 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 30 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 594 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 33 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 603 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Comment: OSTCBCur used once
OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 34 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 606 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 37 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 612 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OSTaskSwHook used once
OS_CPU_ExceptHndlr 00000000

Symbol: OS_CPU_ExceptHndlr
   Definitions
      At line 56 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_c
pu_a.asm
   Uses
      At line 618 in file ..\..\..\..\..\uCOS-II\Ports\ARM\Generic\RealView\os_
cpu_a.asm
Comment: OS_CPU_ExceptHndlr used once
9 symbols
376 symbols in table
